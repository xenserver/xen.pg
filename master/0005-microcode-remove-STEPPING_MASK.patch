From e4170047e223d767674ba246ff0de2e38e47dc06 Mon Sep 17 00:00:00 2001
From: Sergey Dyasli <sergey.dyasli@citrix.com>
Date: Fri, 22 Mar 2019 09:31:56 +0000
Subject: [PATCH 5/8] microcode: remove STEPPING_MASK

Only single stepping multi-socket systems are supported with this patch.

Unclear if Chao includes something like this into v7 or not.
To be upstreamed.

Signed-off-by: Sergey Dyasli <sergey.dyasli@citrix.com>
diff --git a/xen/arch/x86/microcode_intel.c b/xen/arch/x86/microcode_intel.c
index 56f3956422..c257d7c341 100644
--- a/xen/arch/x86/microcode_intel.c
+++ b/xen/arch/x86/microcode_intel.c
@@ -93,8 +93,6 @@ struct extended_sigtable {
 
 #define exttable_size(et) ((et)->count * EXT_SIGNATURE_SIZE + EXT_HEADER_SIZE)
 
-#define STEPPING_MASK ~0xfU
-
 static int collect_cpu_info(struct cpu_signature *csig)
 {
     unsigned int cpu_num = smp_processor_id();
@@ -180,7 +178,7 @@ static bool is_patch_compatible(const struct microcode_patch *patch)
     unsigned long data_size = get_datasize(mc_header);
     unsigned int i;
 
-    if ( (csig->sig & STEPPING_MASK) == (mc_header->sig & STEPPING_MASK) )
+    if ( csig->sig  == mc_header->sig )
         return true;
 
     if ( get_totalsize(mc_header) == (data_size + MC_HEADER_SIZE) )
@@ -189,7 +187,7 @@ static bool is_patch_compatible(const struct microcode_patch *patch)
     ext_header = (const void *)(mc_header + 1) + data_size;
     ext_sig = (const void *)(ext_header + 1);
     for ( i = 0; i < ext_header->count; i++ )
-        if ( (csig->sig & STEPPING_MASK) == (ext_sig[i].sig & STEPPING_MASK) )
+        if ( csig->sig == ext_sig[i].sig )
             return true;
 
     return false;
