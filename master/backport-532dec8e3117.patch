From 532dec8e31174ed450adfd36a4b0b41dec27010d Mon Sep 17 00:00:00 2001
From: Juergen Gross <jgross@suse.com>
Date: Wed, 23 Aug 2017 19:34:00 +0200
Subject: [PATCH] xen: add an optional string end parameter to parse_bool()

Add a parameter to parse_bool() to specify the end of the to be
parsed string. Specifying it as NULL will preserve the current
behavior to parse until the end of the input string, while passing
a non-NULL pointer will specify the first character after the input
string.

This will allow to parse boolean sub-strings without having to
write a NUL byte into the input string.

Modify all users of parse_bool() to pass NULL for the new parameter.

Signed-off-by: Juergen Gross <jgross@suse.com>
Reviewed-by: Kevin Tian <kevin.tian@intel.com>
Reviewed-by: Wei Liu <wei.liu2@citrix.com>
Reviewed-by: Jan Beulich <jbeulich@suse.com>
diff --git a/xen/arch/arm/acpi/boot.c b/xen/arch/arm/acpi/boot.c
index 28b34507fe..cf161804c5 100644
--- a/xen/arch/arm/acpi/boot.c
+++ b/xen/arch/arm/acpi/boot.c
@@ -199,7 +199,7 @@ static void __init parse_acpi_param(char *arg)
         return;
 
     /* Interpret the parameter for use within Xen. */
-    if ( !parse_bool(arg) )
+    if ( !parse_bool(arg, NULL) )
         param_acpi_off = true;
     else if ( !strcmp(arg, "force") ) /* force ACPI to be enabled */
         param_acpi_force = true;
diff --git a/xen/arch/x86/cpu/vpmu.c b/xen/arch/x86/cpu/vpmu.c
index 2f9ddf656b..1f3f2e02c0 100644
--- a/xen/arch/x86/cpu/vpmu.c
+++ b/xen/arch/x86/cpu/vpmu.c
@@ -80,7 +80,7 @@ static void __init parse_vpmu_params(char *s)
 {
     char *sep, *p = s;
 
-    switch ( parse_bool(s) )
+    switch ( parse_bool(s, NULL) )
     {
     case 0:
         break;
diff --git a/xen/arch/x86/mm.c b/xen/arch/x86/mm.c
index 3824fa8810..01e293fcf7 100644
--- a/xen/arch/x86/mm.c
+++ b/xen/arch/x86/mm.c
@@ -184,7 +184,7 @@ static void __init parse_mmio_relax(const char *s)
     if ( !*s )
         opt_mmio_relax = 1;
     else
-        opt_mmio_relax = parse_bool(s);
+        opt_mmio_relax = parse_bool(s, NULL);
     if ( opt_mmio_relax < 0 && strcmp(s, "all") )
         opt_mmio_relax = 0;
 }
diff --git a/xen/arch/x86/nmi.c b/xen/arch/x86/nmi.c
index 426c24ed9b..10c527680f 100644
--- a/xen/arch/x86/nmi.c
+++ b/xen/arch/x86/nmi.c
@@ -55,7 +55,7 @@ static void __init parse_watchdog(char *s)
         return;
     }
 
-    switch ( parse_bool(s) )
+    switch ( parse_bool(s, NULL) )
     {
     case 0:
         opt_watchdog = 0;
diff --git a/xen/arch/x86/psr.c b/xen/arch/x86/psr.c
index 0b5073c41f..3dd3a18433 100644
--- a/xen/arch/x86/psr.c
+++ b/xen/arch/x86/psr.c
@@ -77,7 +77,7 @@ static void __init parse_psr_bool(char *s, char *value, char *feature,
             opt_psr |= mask;
         else
         {
-            int val_int = parse_bool(value);
+            int val_int = parse_bool(value, NULL);
 
             if ( val_int == 0 )
                 opt_psr &= ~mask;
diff --git a/xen/arch/x86/setup.c b/xen/arch/x86/setup.c
index a5540e55c5..a0c42da20d 100644
--- a/xen/arch/x86/setup.c
+++ b/xen/arch/x86/setup.c
@@ -121,7 +121,7 @@ static void __init parse_acpi_param(char *s)
     safe_strcpy(acpi_param, s);
 
     /* Interpret the parameter for use within Xen. */
-    if ( !parse_bool(s) )
+    if ( !parse_bool(s, NULL) )
     {
         disable_acpi();
     }
diff --git a/xen/arch/x86/x86_64/mmconfig-shared.c b/xen/arch/x86/x86_64/mmconfig-shared.c
index a7592c6fe9..a290f2ac67 100644
--- a/xen/arch/x86/x86_64/mmconfig-shared.c
+++ b/xen/arch/x86/x86_64/mmconfig-shared.c
@@ -38,7 +38,7 @@ static void __init parse_mmcfg(char *s)
         if ( ss )
             *ss = '\0';
 
-        if ( !parse_bool(s) )
+        if ( !parse_bool(s, NULL) )
             pci_probe &= ~PCI_PROBE_MMCONF;
         else if ( !strcmp(s, "amd_fam10") || !strcmp(s, "amd-fam10") )
             pci_probe |= PCI_CHECK_ENABLE_AMD_MMCONF;
diff --git a/xen/common/kernel.c b/xen/common/kernel.c
index 7d9858585d..b8985f7820 100644
--- a/xen/common/kernel.c
+++ b/xen/common/kernel.c
@@ -122,7 +122,7 @@ void __init cmdline_parse(const char *cmdline)
                     simple_strtoll(optval, NULL, 0));
                 break;
             case OPT_BOOL:
-                if ( !parse_bool(optval) )
+                if ( !parse_bool(optval, NULL) )
                     bool_assert = !bool_assert;
                 assign_integer_param(param, bool_assert);
                 break;
@@ -149,20 +149,24 @@ void __init cmdline_parse(const char *cmdline)
     }
 }
 
-int __init parse_bool(const char *s)
+int __init parse_bool(const char *s, const char *e)
 {
-    if ( !strcmp("no", s) ||
-         !strcmp("off", s) ||
-         !strcmp("false", s) ||
-         !strcmp("disable", s) ||
-         !strcmp("0", s) )
+    unsigned int len;
+
+    len = e ? ({ ASSERT(e >= s); e - s; }) : strlen(s);
+
+    if ( !strncmp("no", s, len) ||
+         !strncmp("off", s, len) ||
+         !strncmp("false", s, len) ||
+         !strncmp("disable", s, len) ||
+         !strncmp("0", s, len) )
         return 0;
 
-    if ( !strcmp("yes", s) ||
-         !strcmp("on", s) ||
-         !strcmp("true", s) ||
-         !strcmp("enable", s) ||
-         !strcmp("1", s) )
+    if ( !strncmp("yes", s, len) ||
+         !strncmp("on", s, len) ||
+         !strncmp("true", s, len) ||
+         !strncmp("enable", s, len) ||
+         !strncmp("1", s, len) )
         return 1;
 
     return -1;
@@ -197,7 +201,7 @@ int parse_boolean(const char *name, const char *s, const char *e)
             return -1;
         memcpy(buf, s, e - s);
         buf[e - s] = 0;
-        return parse_bool(buf);
+        return parse_bool(buf, NULL);
     }
 
     /* Unrecognised.  Give up. */
diff --git a/xen/drivers/char/console.c b/xen/drivers/char/console.c
index 55ae31aaa6..6d3d597a6f 100644
--- a/xen/drivers/char/console.c
+++ b/xen/drivers/char/console.c
@@ -561,7 +561,7 @@ static int printk_prefix_check(char *p, char **pp)
 
 static void __init parse_console_timestamps(char *s)
 {
-    switch ( parse_bool(s) )
+    switch ( parse_bool(s, NULL) )
     {
     case 0:
         opt_con_timestamp_mode = TSM_NONE;
diff --git a/xen/drivers/cpufreq/cpufreq.c b/xen/drivers/cpufreq/cpufreq.c
index f19b403335..d92fc1a0d5 100644
--- a/xen/drivers/cpufreq/cpufreq.c
+++ b/xen/drivers/cpufreq/cpufreq.c
@@ -69,7 +69,7 @@ static void __init setup_cpufreq_option(char *str)
 
     if ( arg )
         *arg++ = '\0';
-    choice = parse_bool(str);
+    choice = parse_bool(str, NULL);
 
     if ( choice < 0 && !strcmp(str, "dom0-kernel") )
     {
diff --git a/xen/drivers/passthrough/iommu.c b/xen/drivers/passthrough/iommu.c
index 927966fe18..9b09be7987 100644
--- a/xen/drivers/passthrough/iommu.c
+++ b/xen/drivers/passthrough/iommu.c
@@ -89,7 +89,7 @@ static void __init parse_iommu_param(char *s)
         if ( ss )
             *ss = '\0';
 
-        if ( !parse_bool(s) )
+        if ( !parse_bool(s, NULL) )
             iommu_enable = 0;
         else if ( !strcmp(s, "force") || !strcmp(s, "required") )
             force_iommu = val;
diff --git a/xen/drivers/passthrough/vtd/quirks.c b/xen/drivers/passthrough/vtd/quirks.c
index aa388d642a..05c8094dcc 100644
--- a/xen/drivers/passthrough/vtd/quirks.c
+++ b/xen/drivers/passthrough/vtd/quirks.c
@@ -251,7 +251,7 @@ static void __init parse_snb_timeout(const char *s)
 {
     int t;
 
-    t = parse_bool(s);
+    t = parse_bool(s, NULL);
     if ( t < 0 )
     {
         if ( *s == '\0' )
diff --git a/xen/include/xen/lib.h b/xen/include/xen/lib.h
index db1fc4ec25..08e6be3413 100644
--- a/xen/include/xen/lib.h
+++ b/xen/include/xen/lib.h
@@ -66,7 +66,7 @@
 struct domain;
 
 void cmdline_parse(const char *cmdline);
-int parse_bool(const char *s);
+int parse_bool(const char *s, const char *e);
 
 /**
  * Given a specific name, parses a string of the form:
