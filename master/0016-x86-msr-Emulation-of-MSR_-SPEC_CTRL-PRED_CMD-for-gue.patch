From ab40938a1435044c227629bd3bf9a32f09458977 Mon Sep 17 00:00:00 2001
From: Andrew Cooper <andrew.cooper3@citrix.com>
Date: Thu, 9 Nov 2017 19:28:04 +0000
Subject: [PATCH] x86/msr: Emulation of MSR_{SPEC_CTRL,PRED_CMD} for guests

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
Reviewed-by: Jan Beulich <jbeulich@suse.com>
diff --git a/xen/arch/x86/cpuid.c b/xen/arch/x86/cpuid.c
index 452170e..dfafd69 100644
--- a/xen/arch/x86/cpuid.c
+++ b/xen/arch/x86/cpuid.c
@@ -52,6 +52,8 @@ uint32_t __read_mostly raw_featureset[FSCAPINTS];
 uint32_t __read_mostly pv_featureset[FSCAPINTS];
 uint32_t __read_mostly hvm_featureset[FSCAPINTS];
 
+struct cpuid_policy __read_mostly host_cpuid_policy;
+
 static void __init sanitise_featureset(uint32_t *fs)
 {
     /* for_each_set_bit() uses unsigned longs.  Extend with zeroes. */
@@ -218,6 +220,10 @@ void __init calculate_featuresets(void)
     calculate_raw_featureset();
     calculate_pv_featureset();
     calculate_hvm_featureset();
+
+    host_cpuid_policy.feat.ibrsb = boot_cpu_has(X86_FEATURE_IBRSB);
+    host_cpuid_policy.feat.stibp = boot_cpu_has(X86_FEATURE_STIBP);
+    host_cpuid_policy.extd.ibpb  = boot_cpu_has(X86_FEATURE_IBPB);
 }
 
 const uint32_t * __init lookup_deep_deps(uint32_t feature)
diff --git a/xen/arch/x86/domctl.c b/xen/arch/x86/domctl.c
index f3893af..17914a9 100644
--- a/xen/arch/x86/domctl.c
+++ b/xen/arch/x86/domctl.c
@@ -51,6 +51,7 @@ static int gdbsx_guest_mem_io(domid_t domid, struct xen_domctl_gdbsx_memio *iop)
 static void update_domain_cpuid_info(struct domain *d,
                                      const xen_domctl_cpuid_t *ctl)
 {
+    struct cpuid_policy *p = d->arch.cpuid;
     bool call_policy_changed = false; /* Avoid for_each_vcpu() unnecessarily */
 
     switch ( ctl->input[0] )
@@ -169,6 +170,14 @@ static void update_domain_cpuid_info(struct domain *d,
 
             d->arch.pv_domain.cpuidmasks->_7ab0 = mask;
         }
+
+        {
+            /* Forward IBRSB/STIBP settings into cpuid_policy */
+            uint32_t edx = ctl->edx &
+                (is_hvm_domain(d) ? hvm_featureset : pv_featureset)[FEATURESET_7d0];
+
+            p->feat.raw[0].d = edx;
+        }
         break;
 
     case 0xd:
@@ -229,6 +238,17 @@ static void update_domain_cpuid_info(struct domain *d,
             d->arch.pv_domain.cpuidmasks->e1cd = mask;
         }
         break;
+
+    case 0x80000008:
+    {
+        /* Forward IBRB settings into cpuid_policy */
+        uint32_t ebx = ctl->ebx &
+            (is_hvm_domain(d) ? hvm_featureset : pv_featureset)[FEATURESET_e8b];
+
+        p->extd.raw[0 /* 8 */].b = ebx;
+    }
+    break;
+
     }
 
     if ( call_policy_changed )
diff --git a/xen/arch/x86/msr.c b/xen/arch/x86/msr.c
index 31983ed..02a7b49 100644
--- a/xen/arch/x86/msr.c
+++ b/xen/arch/x86/msr.c
@@ -119,11 +119,22 @@ int init_vcpu_msr_policy(struct vcpu *v)
 
 int guest_rdmsr(const struct vcpu *v, uint32_t msr, uint64_t *val)
 {
+    const struct cpuid_policy *cp = v->domain->arch.cpuid;
     const struct msr_domain_policy *dp = v->domain->arch.msr;
     const struct msr_vcpu_policy *vp = v->arch.msr;
 
     switch ( msr )
     {
+    case MSR_PRED_CMD:
+        /* Write-only */
+        goto gp_fault;
+
+    case MSR_SPEC_CTRL:
+        if ( !cp->feat.ibrsb )
+            goto gp_fault;
+        *val = vp->spec_ctrl.guest;
+        break;
+
     case MSR_INTEL_PLATFORM_INFO:
         if ( !dp->plaform_info.available )
             goto gp_fault;
@@ -152,14 +163,38 @@ int guest_wrmsr(struct vcpu *v, uint32_t msr, uint64_t val)
 {
     const struct vcpu *curr = current;
     struct domain *d = v->domain;
+    const struct cpuid_policy *cp = d->arch.cpuid;
     struct msr_domain_policy *dp = d->arch.msr;
     struct msr_vcpu_policy *vp = v->arch.msr;
 
     switch ( msr )
     {
     case MSR_INTEL_PLATFORM_INFO:
+        /* Read-only */
         goto gp_fault;
 
+    case MSR_SPEC_CTRL:
+        if ( !cp->feat.ibrsb )
+            goto gp_fault; /* MSR available? */
+        if ( val & ~(SPEC_CTRL_IBRS |
+                     (cp->feat.stibp ? SPEC_CTRL_STIBP : 0)) )
+            goto gp_fault; /* Rsvd bit set? */
+        vp->spec_ctrl.guest = val;
+        vp->spec_ctrl.host  = val;
+        break;
+
+    case MSR_PRED_CMD:
+        if ( !cp->feat.ibrsb && !cp->extd.ibpb )
+            goto gp_fault; /* MSR available? */
+
+        /*
+         * The only defined behaviour is when writing PRED_CMD_IBPB.  In
+         * practice, real hardware accepts any value without faulting.
+         */
+        if ( v == curr && (val & PRED_CMD_IBPB) )
+            wrmsrl(MSR_PRED_CMD, PRED_CMD_IBPB);
+        break;
+
     case MSR_INTEL_MISC_FEATURES_ENABLES:
     {
         uint64_t rsvd = ~0ull;
diff --git a/xen/include/asm-x86/cpuid.h b/xen/include/asm-x86/cpuid.h
index 36a797a..254f714 100644
--- a/xen/include/asm-x86/cpuid.h
+++ b/xen/include/asm-x86/cpuid.h
@@ -67,6 +67,37 @@ extern struct cpuidmasks cpuidmask_defaults;
 /* Whether or not cpuid faulting is available for the current domain. */
 DECLARE_PER_CPU(bool, cpuid_faulting_enabled);
 
+struct cpuid_policy
+{
+    /* Minimal implementation to make backports easier. */
+
+    struct {
+        union {
+            struct {
+                uint32_t d;
+            } raw[1];
+            struct {
+            uint32_t :26;
+                bool ibrsb :1, stibp :1;
+            };
+        };
+    } feat;
+
+    struct {
+        union {
+            struct {
+                uint32_t b;
+            } raw[1];
+            struct {
+            uint32_t :11;
+                bool ibpb :1;
+            };
+        };
+    } extd;
+};
+
+extern struct cpuid_policy host_cpuid_policy;
+
 #endif /* __ASSEMBLY__ */
 #endif /* !__X86_CPUID_H__ */
 
diff --git a/xen/include/asm-x86/domain.h b/xen/include/asm-x86/domain.h
index 450d76c..f98e4a0 100644
--- a/xen/include/asm-x86/domain.h
+++ b/xen/include/asm-x86/domain.h
@@ -368,6 +368,7 @@ struct arch_domain
 
     cpuid_input_t *cpuids;
 
+    struct cpuid_policy cpuid[1];
     struct msr_domain_policy *msr;
 
     struct PITState vpit;
diff --git a/xen/include/asm-x86/msr.h b/xen/include/asm-x86/msr.h
index 4ea46a7..71f6ee1 100644
--- a/xen/include/asm-x86/msr.h
+++ b/xen/include/asm-x86/msr.h
@@ -188,6 +188,18 @@ struct msr_domain_policy
 /* MSR policy object for per-vCPU MSRs */
 struct msr_vcpu_policy
 {
+    /* 0x00000048 - MSR_SPEC_CTRL */
+    struct {
+        /*
+         * Only the bottom two bits are defined, so no need to waste space
+         * with uint64_t at the moment.  We maintain the guests idea of the
+         * value it wrote, and a value to install into hardware (extended to
+         * uint32_t to simplify the asm) which might be different.
+         */
+        uint32_t host;
+        uint8_t guest;
+    } spec_ctrl;
+
     /* 0x00000140  MSR_INTEL_MISC_FEATURES_ENABLES */
     struct {
         bool available; /* This MSR is non-architectural */
