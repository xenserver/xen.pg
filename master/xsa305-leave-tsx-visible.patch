diff --git a/xen/arch/x86/spec_ctrl.c b/xen/arch/x86/spec_ctrl.c
index d5aefadab5..db922654b4 100644
--- a/xen/arch/x86/spec_ctrl.c
+++ b/xen/arch/x86/spec_ctrl.c
@@ -1156,10 +1156,7 @@ void __init init_speculation_mitigations(void)
          ((hw_smt_enabled && opt_smt) ||
           !boot_cpu_has(X86_FEATURE_SC_VERW_IDLE)) )
     {
-        setup_clear_cpu_cap(X86_FEATURE_HLE);
-        setup_clear_cpu_cap(X86_FEATURE_RTM);
-
-        opt_tsx = 0;
+        opt_tsx = -2;
         tsx_init();
     }
 
diff --git a/xen/arch/x86/tsx.c b/xen/arch/x86/tsx.c
index 1778ff21b7..88efa46ca3 100644
--- a/xen/arch/x86/tsx.c
+++ b/xen/arch/x86/tsx.c
@@ -5,7 +5,8 @@
  * Valid values:
  *   1 => Explicit tsx=1
  *   0 => Explicit tsx=0
- *  -1 => Default, implicit tsx=1, may change to 0 to mitigate TAA
+ *  -1 => Default, implicit tsx=1, may change to -2 to mitigate TAA
+ *  -2 => tsx=0, rtm/hle=1
  *  -3 => Implicit tsx=1 (feed-through from spec-ctrl=0)
  *
  * This is arranged such that the bottom bit encodes whether TSX is actually
@@ -53,8 +54,9 @@ void tsx_init(void)
         rdmsrl(MSR_TSX_CTRL, val);
 
         val &= ~(TSX_CTRL_RTM_DISABLE | TSX_CTRL_CPUID_CLEAR);
-        /* Check bottom bit only.  Higher bits are various sentinals. */
-        if ( !(opt_tsx & 1) )
+        if ( opt_tsx == -2 ) /* HACK.  Safe, but CPUID still visible. */
+            val |= TSX_CTRL_RTM_DISABLE;
+        else if ( !(opt_tsx & 1) )
             val |= TSX_CTRL_RTM_DISABLE | TSX_CTRL_CPUID_CLEAR;
 
         wrmsrl(MSR_TSX_CTRL, val);
