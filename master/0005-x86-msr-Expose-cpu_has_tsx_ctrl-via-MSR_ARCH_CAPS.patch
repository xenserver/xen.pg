From 968c822e91a5ca1b42fe49fb58eedc240c6734e6 Mon Sep 17 00:00:00 2001
From: Andrew Cooper <andrew.cooper3@citrix.com>
Date: Thu, 31 Oct 2019 20:27:11 +0000
Subject: x86/msr: Expose cpu_has_tsx_ctrl via MSR_ARCH_CAPS

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>

diff --git a/xen/include/xen/lib/x86/msr.h b/xen/include/xen/lib/x86/msr.h
index cbc4925..6e96de1 100644
--- a/xen/include/xen/lib/x86/msr.h
+++ b/xen/include/xen/lib/x86/msr.h
@@ -3,7 +3,7 @@
 #define XEN_LIB_X86_MSR_H
 
 /* Maximum number of MSRs written when serialising msr_policy. */
-#define MSR_MAX_SERIALISED_ENTRIES 1
+#define MSR_MAX_SERIALISED_ENTRIES 2
 
 /* MSR policy object for shared per-domain MSRs */
 struct msr_policy
diff --git a/xen/lib/x86/msr.c b/xen/lib/x86/msr.c
index 171abf7..d40f065 100644
--- a/xen/lib/x86/msr.c
+++ b/xen/lib/x86/msr.c
@@ -40,6 +40,18 @@ int x86_msr_copy_to_buffer(const struct msr_policy *p,
 
     COPY_MSR(MSR_INTEL_PLATFORM_INFO, p->platform_info.raw);
 
+#ifdef __XEN__
+    /*
+     * When requesting the Host MSR policy, feed back cpu_has_tsx_ctrl in its
+     * architectural position in MSR_ARCH_CAPS, so the toolstack can evaluate
+     * whether a VM migrating in having seen TSX is safe to run.  Bodge
+     * cpu_has_rtm_always_abort as TSX_CTRL too for the June 2021 changes.
+     */
+    if ( p == &host_msr_policy && (cpu_has_tsx_ctrl == 1 ||
+                                   cpu_has_rtm_always_abort) )
+        COPY_MSR(MSR_ARCH_CAPABILITIES, ARCH_CAPS_TSX_CTRL);
+#endif
+
 #undef COPY_MSR
 
     *nr_entries_p = curr_entry;
