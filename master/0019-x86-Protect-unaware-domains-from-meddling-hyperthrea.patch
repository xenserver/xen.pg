From fa2e2dcf5a08e5261283da6e991e31f42288b9ff Mon Sep 17 00:00:00 2001
From: Andrew Cooper <andrew.cooper3@citrix.com>
Date: Thu, 16 Nov 2017 16:09:44 +0000
Subject: [PATCH] x86: Protect unaware domains from meddling hyperthreads

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
Reviewed-by: Jan Beulich <jbeulich@suse.com>
diff --git a/xen/arch/x86/domain.c b/xen/arch/x86/domain.c
index 9fd110a..ca0a7c1 100644
--- a/xen/arch/x86/domain.c
+++ b/xen/arch/x86/domain.c
@@ -2671,6 +2671,25 @@ int domain_relinquish_resources(struct domain *d)
  */
 void cpuid_policy_updated(struct vcpu *v)
 {
+    const struct cpuid_policy *cp = v->domain->arch.cpuid;
+    struct msr_vcpu_policy *vp = v->arch.msr;
+
+    /*
+     * For guests which know about IBRS but are not told about STIBP running
+     * on hardware supporting hyperthreading, the guest doesn't know to
+     * protect itself fully.  (Such a guest won't be permitted direct access
+     * to the MSR.)  Have Xen fill in the gaps, so an unaware guest can't be
+     * interfered with by a meddling guest on an adjacent hyperthread.
+     */
+    if ( cp->feat.ibrsb )
+    {
+        if ( !cp->feat.stibp && cpu_has_stibp &&
+             !(vp->spec_ctrl.guest & (SPEC_CTRL_IBRS | SPEC_CTRL_STIBP)) )
+            vp->spec_ctrl.host = SPEC_CTRL_STIBP;
+        else
+            vp->spec_ctrl.host = vp->spec_ctrl.guest;
+    }
+
     if ( is_hvm_vcpu(v) )
         hvm_cpuid_policy_changed(v);
 }
diff --git a/xen/arch/x86/msr.c b/xen/arch/x86/msr.c
index 697cc6e..2d99c64 100644
--- a/xen/arch/x86/msr.c
+++ b/xen/arch/x86/msr.c
@@ -181,7 +181,20 @@ int guest_wrmsr(struct vcpu *v, uint32_t msr, uint64_t val)
                      (cp->feat.stibp ? SPEC_CTRL_STIBP : 0)) )
             goto gp_fault; /* Rsvd bit set? */
         vp->spec_ctrl.guest = val;
-        vp->spec_ctrl.host  = val;
+
+        /*
+         * For guests which are not told about STIBP, running on hardware
+         * supporting hyperthreading, the guest doesn't know to protect itself
+         * fully.  (Such a guest won't be permitted direct access to the MSR.)
+         * When IBRS is not in force, have Xen fill in the gaps, so an unaware
+         * guest can't be interfered with by a meddling guest on an adjacent
+         * hyperthread.
+         */
+        if ( !cp->feat.stibp && cpu_has_stibp &&
+             !(val & (SPEC_CTRL_IBRS | SPEC_CTRL_STIBP)) )
+            vp->spec_ctrl.host = SPEC_CTRL_STIBP;
+        else
+            vp->spec_ctrl.host = val;
         break;
 
     case MSR_PRED_CMD:
diff --git a/xen/include/asm-x86/cpufeature.h b/xen/include/asm-x86/cpufeature.h
index 16bdd0d..f41352d 100644
--- a/xen/include/asm-x86/cpufeature.h
+++ b/xen/include/asm-x86/cpufeature.h
@@ -99,6 +99,7 @@
 #define cpu_has_rtm		boot_cpu_has(X86_FEATURE_RTM)
 #define cpu_has_pdcm		boot_cpu_has(X86_FEATURE_PDCM)
 #define cpu_has_lfence_dispatch boot_cpu_has(X86_FEATURE_LFENCE_DISPATCH)
+#define cpu_has_stibp           boot_cpu_has(X86_FEATURE_STIBP)
 
 enum _cache_type {
     CACHE_TYPE_NULL = 0,
