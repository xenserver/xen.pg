From 703cf0386ac0543426a6993cb413ca9127e87d84 Mon Sep 17 00:00:00 2001
From: Razvan Cojocaru <rcojocaru@bitdefender.com>
Date: Tue, 27 Sep 2016 11:01:17 +0300
Subject: x86/emulate: Bypass the emulator if emulation fails

If emulation fails in hvm_do_resume(), single-step instead.

Signed-off-by: Razvan Cojocaru <rcojocaru@bitdefender.com>
diff --git a/xen/arch/x86/hvm/emulate.c b/xen/arch/x86/hvm/emulate.c
index cd8c823..c21aba3 100644
--- a/xen/arch/x86/hvm/emulate.c
+++ b/xen/arch/x86/hvm/emulate.c
@@ -2102,8 +2102,8 @@ int hvm_emulate_one_mmio(unsigned long mfn, unsigned long gla)
     return rc;
 }
 
-void hvm_emulate_one_vm_event(enum emul_kind kind, unsigned int trapnr,
-    unsigned int errcode)
+int hvm_emulate_one_vm_event(enum emul_kind kind, unsigned int trapnr,
+    unsigned int errcode, bool_t treat_unhandleable)
 {
     struct hvm_emulate_ctxt ctx = {{ 0 }};
     int rc;
@@ -2146,14 +2146,12 @@ void hvm_emulate_one_vm_event(enum emul_kind kind, unsigned int trapnr,
          * returning makes the current instruction cause a page fault again,
          * consistent with X86EMUL_RETRY.
          */
-        return;
+        return rc;
     case X86EMUL_UNIMPLEMENTED:
-        if ( hvm_monitor_emul_unimplemented() )
-            return;
-        /* fall-through */
     case X86EMUL_UNHANDLEABLE:
         hvm_dump_emulation_state(XENLOG_G_DEBUG, "Mem event", &ctx, rc);
-        hvm_inject_hw_exception(trapnr, errcode);
+        if ( treat_unhandleable )
+            hvm_inject_hw_exception(trapnr, errcode);
         break;
     case X86EMUL_EXCEPTION:
         hvm_inject_event(&ctx.ctxt.event);
@@ -2161,6 +2159,8 @@ void hvm_emulate_one_vm_event(enum emul_kind kind, unsigned int trapnr,
     }
 
     hvm_emulate_writeback(&ctx);
+
+    return rc;
 }
 
 void hvm_emulate_init_once(
diff --git a/xen/arch/x86/hvm/vm_event.c b/xen/arch/x86/hvm/vm_event.c
index b15a654..cc9e63f 100644
--- a/xen/arch/x86/hvm/vm_event.c
+++ b/xen/arch/x86/hvm/vm_event.c
@@ -92,8 +92,15 @@ void hvm_vm_event_do_resume(struct vcpu *v)
             vmx_start_reexecute_instruction(v, v->arch.vm_event->gpa,
                                             XENMEM_access_x);
         else
-            hvm_emulate_one_vm_event(kind, TRAP_invalid_op,
-                                     X86_EVENT_NO_EC);
+        {
+            int rc = hvm_emulate_one_vm_event(kind, TRAP_invalid_op,
+                                              X86_EVENT_NO_EC,
+                                              !opt_introspection_extn);
+
+            if ( opt_introspection_extn && rc == X86EMUL_UNHANDLEABLE )
+                vmx_start_reexecute_instruction(v, v->arch.vm_event->gpa,
+                                                XENMEM_access_rwx);
+        }
 
         v->arch.vm_event->emulate_flags = 0;
     }
diff --git a/xen/include/asm-x86/hvm/emulate.h b/xen/include/asm-x86/hvm/emulate.h
index 6d13665..4d0e54f 100644
--- a/xen/include/asm-x86/hvm/emulate.h
+++ b/xen/include/asm-x86/hvm/emulate.h
@@ -54,9 +54,10 @@ bool __nonnull(1, 2) hvm_emulate_one_insn(
     const char *descr);
 int hvm_emulate_one(
     struct hvm_emulate_ctxt *hvmemul_ctxt);
-void hvm_emulate_one_vm_event(enum emul_kind kind,
+int hvm_emulate_one_vm_event(enum emul_kind kind,
     unsigned int trapnr,
-    unsigned int errcode);
+    unsigned int errcode,
+    bool_t treat_unhandleable);
 /* Must be called once to set up hvmemul state. */
 void hvm_emulate_init_once(
     struct hvm_emulate_ctxt *hvmemul_ctxt,
