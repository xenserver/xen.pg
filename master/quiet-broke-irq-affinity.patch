Quiet "Broke affinity for irq" messages during shutdown

Quiet the "Broke affinity for irq" messages during a shutdown or
suspend, as it is already done during a reboot. Do this by conditionally
printing the messages depending on the system state, as originally
suggested by Jan when discussing commit e509b8e09c00 ("x86: fixup IRQs
when CPUs go down during shutdown").

Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
Suggested-by: Jan Beulich <jbeulich@suse.com>

diff --git a/xen/arch/x86/irq.c b/xen/arch/x86/irq.c
index 57e6c18..42d7ac2 100644
--- a/xen/arch/x86/irq.c
+++ b/xen/arch/x86/irq.c
@@ -2328,7 +2328,7 @@ static int __init setup_dump_irqs(void)
 __initcall(setup_dump_irqs);
 
 /* Reset irq affinities to match the given CPU mask. */
-void fixup_irqs(const cpumask_t *mask, bool verbose)
+void fixup_irqs(const cpumask_t *mask)
 {
     unsigned int irq;
     static int warned;
@@ -2381,7 +2381,8 @@ void fixup_irqs(const cpumask_t *mask, bool verbose)
 
         spin_unlock(&desc->lock);
 
-        if ( !verbose )
+        if ( system_state == SYS_STATE_reboot ||
+             system_state == SYS_STATE_suspend )
             continue;
 
         if ( break_affinity && set_affinity )
diff --git a/xen/arch/x86/shutdown.c b/xen/arch/x86/shutdown.c
index f63b8a6..92bb75d 100644
--- a/xen/arch/x86/shutdown.c
+++ b/xen/arch/x86/shutdown.c
@@ -519,6 +519,7 @@ void machine_restart(unsigned int delay_millisecs)
 
     if ( system_state >= SYS_STATE_smp_boot )
     {
+        system_state = SYS_STATE_reboot;
         local_irq_enable();
 
         /* Ensure we are the boot CPU. */
diff --git a/xen/arch/x86/smp.c b/xen/arch/x86/smp.c
index fd6d254..4d12543 100644
--- a/xen/arch/x86/smp.c
+++ b/xen/arch/x86/smp.c
@@ -303,7 +303,7 @@ void smp_send_stop(void)
     int timeout = 10;
 
     local_irq_disable();
-    fixup_irqs(cpumask_of(smp_processor_id()), 0);
+    fixup_irqs(cpumask_of(smp_processor_id()));
     local_irq_enable();
 
     smp_call_function(stop_this_cpu, NULL, 0);
diff --git a/xen/arch/x86/smpboot.c b/xen/arch/x86/smpboot.c
index f375eb6..7a3a291 100644
--- a/xen/arch/x86/smpboot.c
+++ b/xen/arch/x86/smpboot.c
@@ -897,7 +897,7 @@ void __cpu_disable(void)
 
     /* It's now safe to remove this processor from the online map */
     cpumask_clear_cpu(cpu, &cpu_online_map);
-    fixup_irqs(&cpu_online_map, 1);
+    fixup_irqs(&cpu_online_map);
     fixup_eoi();
 
     if ( cpu_disable_scheduler(cpu) )
diff --git a/xen/include/asm-x86/irq.h b/xen/include/asm-x86/irq.h
index 240c3e8..8bdcb38 100644
--- a/xen/include/asm-x86/irq.h
+++ b/xen/include/asm-x86/irq.h
@@ -148,7 +148,7 @@ int unmap_domain_pirq_emuirq(struct domain *d, int pirq);
 bool hvm_domain_use_pirq(const struct domain *, const struct pirq *);
 
 /* Reset irq affinities to match the given CPU mask. */
-void fixup_irqs(const cpumask_t *mask, bool verbose);
+void fixup_irqs(const cpumask_t *mask);
 void fixup_eoi(void);
 
 int  init_irq_data(void);
diff --git a/xen/include/xen/kernel.h b/xen/include/xen/kernel.h
index 548b64d..f98a5cf 100644
--- a/xen/include/xen/kernel.h
+++ b/xen/include/xen/kernel.h
@@ -95,7 +95,8 @@ extern enum system_state {
     SYS_STATE_smp_boot,
     SYS_STATE_active,
     SYS_STATE_suspend,
-    SYS_STATE_resume
+    SYS_STATE_resume,
+    SYS_STATE_reboot,
 } system_state;
 
 bool_t is_active_kernel_text(unsigned long addr);
