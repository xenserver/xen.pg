diff --git a/tools/ocaml/libs/xc/xenctrl.ml b/tools/ocaml/libs/xc/xenctrl.ml
index 7f58f44..5e82d5e 100644
--- a/tools/ocaml/libs/xc/xenctrl.ml
+++ b/tools/ocaml/libs/xc/xenctrl.ml
@@ -151,7 +151,7 @@ let with_intf f =
 		handle := Some h;
 		f h
 
-external _domain_create: handle -> int32 -> domain_create_flag list -> int array -> arch_domainconfig -> domid
+external _domain_create: handle -> int32 -> domain_create_flag list -> int array -> domid
        = "stub_xc_domain_create"
 
 let int_array_of_uuid_string s =
diff --git a/tools/ocaml/libs/xc/xenctrl.mli b/tools/ocaml/libs/xc/xenctrl.mli
index 8f3d57e..887401e 100644
--- a/tools/ocaml/libs/xc/xenctrl.mli
+++ b/tools/ocaml/libs/xc/xenctrl.mli
@@ -111,7 +111,7 @@ val get_handle: unit -> handle option
  * would invalidate the handle that with_intf passes to its argument. *)
 val close_handle: unit -> unit
 
-val domain_create : handle -> int32 -> domain_create_flag list -> string -> arch_domainconfig -> domid
+val domain_create : handle -> int32 -> domain_create_flag list -> string -> domid
 val domain_sethandle : handle -> domid -> string -> unit
 external domain_max_vcpus : handle -> domid -> int -> unit
   = "stub_xc_domain_max_vcpus"
diff --git a/tools/ocaml/libs/xc/xenctrl_stubs.c b/tools/ocaml/libs/xc/xenctrl_stubs.c
index 4ed3d0e..2fbe3e1 100644
--- a/tools/ocaml/libs/xc/xenctrl_stubs.c
+++ b/tools/ocaml/libs/xc/xenctrl_stubs.c
@@ -103,8 +103,7 @@ static int domain_create_flag_table[] = {
 };
 
 CAMLprim value stub_xc_domain_create(value xch, value ssidref,
-                                     value flags, value handle,
-                                     value domconfig)
+                                     value flags, value handle)
 {
 	CAMLparam4(xch, ssidref, flags, handle);
 
@@ -115,7 +114,6 @@ CAMLprim value stub_xc_domain_create(value xch, value ssidref,
 	uint32_t c_ssidref = Int32_val(ssidref);
 	unsigned int c_flags = 0;
 	value l;
-	xc_domain_configuration_t config = {};
 
         if (Wosize_val(handle) != 16)
 		caml_invalid_argument("Handle not a 16-integer array");
@@ -129,28 +127,8 @@ CAMLprim value stub_xc_domain_create(value xch, value ssidref,
 		c_flags |= domain_create_flag_table[v];
 	}
 
-	switch(Tag_val(domconfig)) {
-	case 0: /* ARM - nothing to do */
-		caml_failwith("Unhandled: ARM");
-		break;
-
-	case 1: /* X86 - emulation flags in the block */
-#if defined(__i386__) || defined(__x86_64__)
-		for (l = Field(Field(domconfig, 0), 0);
-		     l != Val_none;
-		     l = Field(l, 1))
-			config.emulation_flags |= 1u << Int_val(Field(l, 0));
-#else
-		caml_failwith("Unhandled: x86");
-#endif
-		break;
-
-	default:
-		caml_failwith("Unhandled domconfig type");
-	}
-
 	caml_enter_blocking_section();
-	result = xc_domain_create(_H(xch), c_ssidref, h, c_flags, &domid, &config);
+	result = xc_domain_create(_H(xch), c_ssidref, h, c_flags, &domid, NULL);
 	caml_leave_blocking_section();
 
 	if (result < 0)
