From 2177335fc0e67881ec821074c70882e755d31e43 Mon Sep 17 00:00:00 2001
From: Sergey Dyasli <sergey.dyasli@citrix.com>
Date: Tue, 19 Mar 2019 11:02:36 +0000
Subject: [PATCH 6/8] microcode: simplify ucode caching

Remove the list and store only 2 ucode blobs:

    1. A new one to be applied
    2. The current one that was successfully applied

I wait for Chao to do something like this in v7.
To be upstreamed.

Signed-off-by: Sergey Dyasli <sergey.dyasli@citrix.com>
diff --git a/xen/arch/x86/microcode.c b/xen/arch/x86/microcode.c
index 63b01b571f..d8fd1e4553 100644
--- a/xen/arch/x86/microcode.c
+++ b/xen/arch/x86/microcode.c
@@ -83,7 +83,7 @@ static struct ucode_mod_blob __initdata ucode_blob;
  */
 static bool_t __initdata ucode_scan;
 
-static LIST_HEAD(microcode_cache);
+static struct microcode_patch *curr_ucode, *new_ucode;
 
 void __init microcode_set_module(unsigned int idx)
 {
@@ -232,29 +232,26 @@ static int next_cpu;
  */
 bool microcode_save_patch(struct microcode_patch *new)
 {
-    struct microcode_patch *old, *free = NULL;
+    struct microcode_patch *free = NULL;
     enum microcode_match_result result = MIS_UCODE;
     unsigned long flags;
 
     write_lock_irqsave(&cache_rwlock, flags);
 
-    list_for_each_entry(old, &microcode_cache, list)
+    if ( curr_ucode )
     {
-        result = microcode_ops->compare_patch(new, old);
+        result = microcode_ops->compare_patch(new, curr_ucode);
 
         if ( result == OLD_UCODE )
         {
             free = new;
-            break;
         }
         else if ( result == NEW_UCODE )
         {
-            list_replace(&old->list, &new->list);
-            free = old;
-            break;
+            new_ucode = new;
         }
         else /* result == MIS_UCODE */
-            continue;
+            ;
     }
 
     if ( result == MIS_UCODE )
@@ -263,7 +260,7 @@ bool microcode_save_patch(struct microcode_patch *new)
              !microcode_ops->is_patch_compatible(new) )
             free = new;
         else
-            list_add_tail(&new->list, &microcode_cache);
+            new_ucode = new;
     }
 
     write_unlock_irqrestore(&cache_rwlock, flags);
@@ -282,13 +279,11 @@ bool microcode_save_patch(struct microcode_patch *new)
  */
 const struct microcode_patch *microcode_find_patch(void)
 {
-    const struct microcode_patch *microcode_patch;
+    if ( new_ucode && microcode_ops->match_cpu(new_ucode) )
+        return new_ucode;
 
-    list_for_each_entry(microcode_patch, &microcode_cache, list)
-    {
-        if ( microcode_ops->match_cpu(microcode_patch) )
-            return microcode_patch;
-    }
+    if ( curr_ucode && microcode_ops->match_cpu(curr_ucode) )
+        return curr_ucode;
 
     return NULL;
 }
@@ -465,6 +460,8 @@ int microcode_update(XEN_GUEST_HANDLE_PARAM(const_void) buf, unsigned long len,
         goto put;
     }
 
+    ASSERT(new_ucode != NULL);
+
     atomic_set(&cpu_in, 0);
     atomic_set(&cpu_out, 0);
 
@@ -499,6 +496,20 @@ int microcode_update(XEN_GUEST_HANDLE_PARAM(const_void) buf, unsigned long len,
      *   conservative and good.
      */
     ret = stop_machine_run(do_microcode_update, NULL, NR_CPUS);
+    if ( ret == 0 )
+    {
+        /* Update succeeded. Replace ucode blob with the new one. */
+        if ( curr_ucode )
+            microcode_ops->free_patch(curr_ucode);
+        curr_ucode = new_ucode;
+        new_ucode = NULL;
+    }
+    else
+    {
+        /* Update failed. Get rid of this ucode blob. */
+        microcode_ops->free_patch(new_ucode);
+        new_ucode = NULL;
+    }
     watchdog_enable();
 
  put:
@@ -541,6 +552,15 @@ int early_microcode_update_cpu(void)
     rc = microcode_update_cpu();
     spin_unlock(&early_ucode_update_lock);
 
+    if ( rc == 0 && new_ucode )
+    {
+        /* Swap ucode pointers during early boot. */
+        if ( curr_ucode )
+            microcode_ops->free_patch(curr_ucode);
+        curr_ucode = new_ucode;
+        new_ucode = NULL;
+    }
+
     return rc;
 }
 
diff --git a/xen/arch/x86/microcode_amd.c b/xen/arch/x86/microcode_amd.c
index 7128146162..755331e208 100644
--- a/xen/arch/x86/microcode_amd.c
+++ b/xen/arch/x86/microcode_amd.c
@@ -190,6 +190,11 @@ static bool match_cpu(const struct microcode_patch *patch)
     return microcode_fits(patch->data);
 }
 
+static bool is_patch_compatible(const struct microcode_patch *patch)
+{
+    return microcode_fits(patch->data);
+}
+
 static struct microcode_patch *alloc_microcode_patch(
     const struct microcode_amd *mc_amd)
 {
@@ -621,6 +626,7 @@ static const struct microcode_ops microcode_amd_ops = {
     .compare_patch                    = compare_patch,
     .free_patch                       = free_patch,
     .match_cpu                        = match_cpu,
+    .is_patch_compatible              = is_patch_compatible,
 };
 
 int __init microcode_init_amd(void)
diff --git a/xen/include/asm-x86/microcode.h b/xen/include/asm-x86/microcode.h
index 5cf177e403..72957a850c 100644
--- a/xen/include/asm-x86/microcode.h
+++ b/xen/include/asm-x86/microcode.h
@@ -13,7 +13,6 @@ enum microcode_match_result {
 struct cpu_signature;
 
 struct microcode_patch {
-    struct list_head list;
     void *data;
 };
 
