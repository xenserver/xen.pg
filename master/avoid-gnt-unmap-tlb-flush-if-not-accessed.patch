xen/gnttab: Avoid TLB flush if grant mapped page was not accessed

Implement an optimisation to avoid a TLB flush if the grant mapped page was
not accessed whilst it was mapped.

Signed-off-by: Malcolm Crossley <malcolm.crossley@citrix.com>
Signed-off-by: Sergey Dyasli <sergey.dyasli@citrix.com>

diff --git a/xen/arch/x86/mm.c b/xen/arch/x86/mm.c
index 7c3c6fef55..3d9cb9062d 100644
--- a/xen/arch/x86/mm.c
+++ b/xen/arch/x86/mm.c
@@ -1950,49 +1950,53 @@ void page_unlock(struct page_info *page)
 
 /* How to write an entry to the guest pagetables.
  * Returns 0 for failure (pointer not valid), 1 for success. */
-static inline int update_intpte(intpte_t *p, 
-                                intpte_t old, 
-                                intpte_t new,
-                                unsigned long mfn,
-                                struct vcpu *v,
-                                int preserve_ad)
+static inline int _update_intpte(
+    intpte_t *p, intpte_t *old, intpte_t new,
+    unsigned long mfn, struct vcpu *v, int preserve_ad, int use_cmpxchg)
 {
     int rv = 1;
 #ifndef PTE_UPDATE_WITH_CMPXCHG
-    if ( !preserve_ad )
+    if ( !preserve_ad && !use_cmpxchg )
     {
         rv = paging_write_guest_entry(v, p, new, _mfn(mfn));
     }
     else
 #endif
     {
-        intpte_t t = old;
+        intpte_t t = *old;
         for ( ; ; )
         {
             intpte_t _new = new;
             if ( preserve_ad )
-                _new |= old & (_PAGE_ACCESSED | _PAGE_DIRTY);
+                _new |= *old & (_PAGE_ACCESSED | _PAGE_DIRTY);
 
             rv = paging_cmpxchg_guest_entry(v, p, &t, _new, _mfn(mfn));
             if ( unlikely(rv == 0) )
             {
                 MEM_LOG("Failed to update %" PRIpte " -> %" PRIpte
-                        ": saw %" PRIpte, old, _new, t);
+                        ": saw %" PRIpte, *old, _new, t);
                 break;
             }
 
-            if ( t == old )
+            if ( t == *old )
                 break;
 
             /* Allowed to change in Accessed/Dirty flags only. */
-            BUG_ON((t ^ old) & ~(intpte_t)(_PAGE_ACCESSED|_PAGE_DIRTY));
+            BUG_ON((t ^ *old) & ~(intpte_t)(_PAGE_ACCESSED|_PAGE_DIRTY));
 
-            old = t;
+            *old = t;
         }
     }
     return rv;
 }
 
+static inline int update_intpte(
+    intpte_t *p, intpte_t old, intpte_t new,
+    unsigned long mfn, struct vcpu *v, int preserve_ad)
+{
+    return _update_intpte(p, &old, new, mfn, v, preserve_ad, 0);
+}
+
 /* Macro that wraps the appropriate type-changes around update_intpte().
  * Arguments are: type, ptr, old, new, mfn, vcpu */
 #define UPDATE_ENTRY(_t,_p,_o,_n,_m,_v,_ad)                         \
@@ -4277,7 +4281,7 @@ static int destroy_grant_pte_mapping(
     }
 
     if ( unlikely((l1e_get_flags(ol1e) ^ grant_pte_flags) &
-                  ~(_PAGE_AVAIL | PAGE_CACHE_ATTRS)) )
+                  ~(_PAGE_AVAIL | PAGE_CACHE_ATTRS | _PAGE_ACCESSED | _PAGE_DIRTY)) )
         MEM_LOG("PTE flags %x at %"PRIx64" don't match grant (%x)\n",
                 l1e_get_flags(ol1e), addr, grant_pte_flags);
 
@@ -4358,7 +4362,7 @@ static int create_grant_va_mapping(
 
 static int replace_grant_va_mapping(
     unsigned long addr, unsigned long frame, unsigned int grant_pte_flags,
-    l1_pgentry_t nl1e, struct vcpu *v)
+    l1_pgentry_t nl1e, struct vcpu *v, int *page_accessed)
 {
     l1_pgentry_t *pl1e, ol1e;
     unsigned long gl1mfn;
@@ -4410,18 +4414,28 @@ static int replace_grant_va_mapping(
     }
 
     if ( unlikely((l1e_get_flags(ol1e) ^ grant_pte_flags) &
-                  ~(_PAGE_AVAIL | PAGE_CACHE_ATTRS)) )
+                  ~(_PAGE_AVAIL | PAGE_CACHE_ATTRS | _PAGE_ACCESSED | _PAGE_DIRTY)) )
         MEM_LOG("PTE flags %x for %"PRIx64" don't match grant (%x)",
                 l1e_get_flags(ol1e), addr, grant_pte_flags);
 
     /* Delete pagetable entry. */
-    if ( unlikely(!UPDATE_ENTRY(l1, pl1e, ol1e, nl1e, gl1mfn, v, 0)) )
+    if ( unlikely(!_update_intpte(&pl1e->l1, &ol1e.l1, nl1e.l1, gl1mfn, v, 0, 1)) )
     {
         MEM_LOG("Cannot delete PTE entry for %"PRIx64, addr);
         rc = GNTST_general_error;
         goto unlock_and_out;
     }
 
+    /*
+     * Calculate a synthetic _PAGE_ACCESSED bit, which controls whether the
+     * TLB flush is performed or skipped for grant unmap.
+     *
+     * Note: The use of a locked cmpxchg makes this is safe on AMD processors,
+     * as locked accesses are ordered WRT the pagewalk, unlike normal
+     * accesses.
+     */
+    *page_accessed = !!(l1e_get_flags(ol1e) & _PAGE_ACCESSED);
+
  unlock_and_out:
     page_unlock(l1pg);
     put_page(l1pg);
@@ -4432,10 +4446,10 @@ static int replace_grant_va_mapping(
 
 static int destroy_grant_va_mapping(
     unsigned long addr, unsigned long frame, unsigned int grant_pte_flags,
-    struct vcpu *v)
+    struct vcpu *v, int *page_accessed)
 {
     return replace_grant_va_mapping(addr, frame, grant_pte_flags,
-                                    l1e_empty(), v);
+                                    l1e_empty(), v, page_accessed);
 }
 
 static int create_grant_p2m_mapping(uint64_t addr, unsigned long frame,
@@ -4470,7 +4484,7 @@ int create_grant_host_mapping(uint64_t addr, unsigned long frame,
         return create_grant_p2m_mapping(addr, frame, flags, cache_flags);
 
     grant_pte_flags =
-        _PAGE_PRESENT | _PAGE_ACCESSED | _PAGE_DIRTY | _PAGE_GNTTAB;
+        _PAGE_PRESENT | _PAGE_GNTTAB;
     if ( cpu_has_nx )
         grant_pte_flags |= _PAGE_NX_BIT;
 
@@ -4521,7 +4535,8 @@ static int replace_grant_p2m_mapping(
 }
 
 int replace_grant_host_mapping(
-    uint64_t addr, unsigned long frame, uint64_t new_addr, unsigned int flags)
+    uint64_t addr, unsigned long frame, uint64_t new_addr, unsigned int flags,
+    int *page_accessed)
 {
     struct vcpu *curr = current;
     l1_pgentry_t *pl1e, ol1e;
@@ -4561,7 +4576,8 @@ int replace_grant_host_mapping(
     }
 
     if ( !new_addr )
-        return destroy_grant_va_mapping(addr, frame, grant_pte_flags, curr);
+        return destroy_grant_va_mapping(addr, frame, grant_pte_flags,
+                                        curr, page_accessed);
 
     pl1e = guest_map_l1e(new_addr, &gl1mfn);
     if ( !pl1e )
@@ -4609,7 +4625,8 @@ int replace_grant_host_mapping(
     put_page(l1pg);
     guest_unmap_l1e(pl1e);
 
-    rc = replace_grant_va_mapping(addr, frame, grant_pte_flags, ol1e, curr);
+    rc = replace_grant_va_mapping(addr, frame, grant_pte_flags,
+                                  ol1e, curr, page_accessed);
     if ( rc && !paging_mode_refcounts(curr->domain) )
         put_page_from_l1e(ol1e, curr->domain);
 
diff --git a/xen/common/grant_table.c b/xen/common/grant_table.c
index 8e9437d3f8..ff38ad1a5c 100644
--- a/xen/common/grant_table.c
+++ b/xen/common/grant_table.c
@@ -94,6 +94,7 @@ struct gnttab_unmap_common {
 
     /* Return */
     int16_t status;
+    int page_accessed;
 
     /* Shared state beteen *_unmap and *_unmap_complete */
     u16 done;
@@ -102,6 +103,12 @@ struct gnttab_unmap_common {
     grant_ref_t ref;
 };
 
+#ifndef NDEBUG
+atomic_t grant_unmap_tlb_flush_avoided;
+atomic_t grant_unmap_tlb_flush_done;
+atomic_t grant_unmap_operations;
+#endif
+
 /* Number of unmap operations that are done between each tlb flush */
 #define GNTTAB_UNMAP_BATCH_SIZE 32
 
@@ -1110,6 +1117,8 @@ __gnttab_unmap_common(
     ld = current->domain;
     lgt = ld->grant_table;
 
+    op->page_accessed = 1;
+
     if ( unlikely(op->handle >= lgt->maptrack_limit) )
     {
         gdprintk(XENLOG_INFO, "Bad handle (%d).\n", op->handle);
@@ -1220,7 +1229,7 @@ __gnttab_unmap_common(
     {
         if ( (rc = replace_grant_host_mapping(op->host_addr,
                                               op->frame, op->new_addr, 
-                                              flags)) < 0 )
+                                              flags, &op->page_accessed)) < 0 )
             goto act_release_out;
 
         map->flags &= ~GNTMAP_host_map;
@@ -1378,28 +1387,42 @@ static long
 gnttab_unmap_grant_ref(
     XEN_GUEST_HANDLE_PARAM(gnttab_unmap_grant_ref_t) uop, unsigned int count)
 {
-    int i, c, partial_done, done = 0;
+    int i, c, partial_done, done = 0, grant_map_accessed = 0;
     struct gnttab_unmap_grant_ref op;
     struct gnttab_unmap_common common[GNTTAB_UNMAP_BATCH_SIZE];
 
+#ifndef NDEBUG
+    atomic_inc(&grant_unmap_operations);
+#endif
     while ( count != 0 )
     {
         c = min(count, (unsigned int)GNTTAB_UNMAP_BATCH_SIZE);
         partial_done = 0;
+        grant_map_accessed = 0;
 
         for ( i = 0; i < c; i++ )
         {
             if ( unlikely(__copy_from_guest(&op, uop, 1)) )
                 goto fault;
             __gnttab_unmap_grant_ref(&op, &(common[i]));
+            grant_map_accessed |= common[i].page_accessed;
             ++partial_done;
             if ( unlikely(__copy_field_to_guest(uop, &op, status)) )
                 goto fault;
             guest_handle_add_offset(uop, 1);
         }
 
-        gnttab_flush_tlb(current->domain);
-
+        if ( grant_map_accessed || !is_hardware_domain(current->domain) )
+        {
+            gnttab_flush_tlb(current->domain);
+#ifndef NDEBUG
+            atomic_inc(&grant_unmap_tlb_flush_done);
+        }
+        else
+        {
+            atomic_inc(&grant_unmap_tlb_flush_avoided);
+#endif
+        }
         for ( i = 0; i < partial_done; i++ )
             __gnttab_unmap_common_complete(&(common[i]));
 
@@ -3656,6 +3679,11 @@ static void gnttab_usage_print_all(unsigned char key)
     printk("%s [ key '%c' pressed\n", __FUNCTION__, key);
     for_each_domain ( d )
         gnttab_usage_print(d);
+#ifndef NDEBUG
+    printk("Grant unmap tlb flush performed %i\n", atomic_read(&grant_unmap_tlb_flush_done));
+    printk("Grant unmap tlb flush avoided %i\n", atomic_read(&grant_unmap_tlb_flush_avoided));
+    printk("Grant unmap operations %i\n", atomic_read(&grant_unmap_operations));
+#endif
     printk("%s ] done\n", __FUNCTION__);
 }
 
diff --git a/xen/include/asm-x86/grant_table.h b/xen/include/asm-x86/grant_table.h
index ff1ab2e327..1cdb34478b 100644
--- a/xen/include/asm-x86/grant_table.h
+++ b/xen/include/asm-x86/grant_table.h
@@ -16,7 +16,8 @@
 int create_grant_host_mapping(uint64_t addr, unsigned long frame,
 			      unsigned int flags, unsigned int cache_flags);
 int replace_grant_host_mapping(
-    uint64_t addr, unsigned long frame, uint64_t new_addr, unsigned int flags);
+    uint64_t addr, unsigned long frame, uint64_t new_addr, unsigned int flags,
+    int *page_accessed);
 
 #define gnttab_set_frame_gfn(d, st, idx, gfn) do {} while ( 0 )
 #define gnttab_get_frame_gfn(d, st, idx) ({                              \
