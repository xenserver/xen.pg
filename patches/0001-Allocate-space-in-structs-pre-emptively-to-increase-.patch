From 852b162c8255b2bdecde76e89e272149548e0669 Mon Sep 17 00:00:00 2001
From: Sergey Dyasli <sergey.dyasli@citrix.com>
Date: Wed, 7 Nov 2018 09:31:17 +0000
Subject: [PATCH] Allocate space in structs pre-emptively to increase chances
 of livepatching

1. Expand FEATURESET for 4 more words
2. Increment CPUID_GUEST_NR_FEAT to get an additional feature leaf
   in struct cpuid_policy
3. Reserve space in the following structs:

    grant_table
    vtd_iommu
    amd_iommu
    guest_iommu
    hvm_ioreq_vcpu
    hvm_ioreq_server
    msr_domain_policy
    msr_vcpu_policy
    p2m_domain

Signed-off-by: Sergey Dyasli <sergey.dyasli@citrix.com>
diff --git a/tools/libs/light/libxl_cpuid.c b/tools/libs/light/libxl_cpuid.c
index 86a08f29a19c..a1840fb17f67 100644
--- a/tools/libs/light/libxl_cpuid.c
+++ b/tools/libs/light/libxl_cpuid.c
@@ -347,7 +347,7 @@ int libxl_cpuid_parse_config(libxl_cpuid_policy_list *policy, const char* str)
     const struct cpuid_flags *flag;
     const struct feature_name *feat;
 
-    BUILD_BUG_ON(ARRAY_SIZE(feature_to_policy) != FEATURESET_NR_ENTRIES);
+    BUILD_BUG_ON(ARRAY_SIZE(feature_to_policy) > FEATURESET_NR_ENTRIES);
 
     sep = strchr(str, '=');
     if (sep == NULL) {
diff --git a/xen/arch/x86/include/asm/msr.h b/xen/arch/x86/include/asm/msr.h
index 1d8ea9f26faa..9a08cc36f26e 100644
--- a/xen/arch/x86/include/asm/msr.h
+++ b/xen/arch/x86/include/asm/msr.h
@@ -416,6 +416,9 @@ struct vcpu_msrs
      * values here may be stale in current context.
      */
     uint32_t dr_mask[4];
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[2];
 };
 
 int init_vcpu_msr_policy(struct vcpu *v);
diff --git a/xen/arch/x86/include/asm/p2m.h b/xen/arch/x86/include/asm/p2m.h
index 40545f5fa84f..b21a41a6542e 100644
--- a/xen/arch/x86/include/asm/p2m.h
+++ b/xen/arch/x86/include/asm/p2m.h
@@ -377,6 +377,9 @@ struct p2m_domain {
         unsigned long entry_count;
     } ioreq;
 #endif /* CONFIG_HVM */
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[2];
 };
 
 /* get host p2m table */
diff --git a/xen/common/grant_table.c b/xen/common/grant_table.c
index 37fbf5fb810b..df629164d123 100644
--- a/xen/common/grant_table.c
+++ b/xen/common/grant_table.c
@@ -99,6 +99,9 @@ struct grant_table {
 
     /* Domain to which this struct grant_table belongs. */
     struct domain *domain;
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[2];
 };
 
 unsigned int __read_mostly opt_max_grant_frames = 64;
diff --git a/xen/drivers/passthrough/amd/iommu.h b/xen/drivers/passthrough/amd/iommu.h
index 8bc3c35b1bb1..2a6986ec0aa2 100644
--- a/xen/drivers/passthrough/amd/iommu.h
+++ b/xen/drivers/passthrough/amd/iommu.h
@@ -106,6 +106,9 @@ struct amd_iommu {
     int enabled;
 
     struct list_head ats_devices;
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[2];
 };
 
 struct ivrs_unity_map {
@@ -192,6 +195,9 @@ struct guest_iommu {
 
     /* guest interrupt settings */
     struct guest_iommu_msi  msi;
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[2];
 };
 
 extern bool_t iommuv2_enabled;
diff --git a/xen/drivers/passthrough/vtd/iommu.h b/xen/drivers/passthrough/vtd/iommu.h
index 78aa8a96f5a0..06dbc01a0275 100644
--- a/xen/drivers/passthrough/vtd/iommu.h
+++ b/xen/drivers/passthrough/vtd/iommu.h
@@ -510,6 +510,9 @@ struct vtd_iommu {
     unsigned long *domid_bitmap;  /* domain id bitmap */
     domid_t *domid_map;           /* domain id mapping array */
     uint32_t version;
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[2];
 };
 
 #define INTEL_IOMMU_DEBUG(fmt, args...) \
diff --git a/xen/include/xen/ioreq.h b/xen/include/xen/ioreq.h
index a26614d331e3..481536653d5b 100644
--- a/xen/include/xen/ioreq.h
+++ b/xen/include/xen/ioreq.h
@@ -34,6 +34,9 @@ struct ioreq_vcpu {
     struct vcpu      *vcpu;
     evtchn_port_t    ioreq_evtchn;
     bool             pending;
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[1];
 };
 
 #define NR_IO_RANGE_TYPES (XEN_DMOP_IO_RANGE_PCI + 1)
@@ -55,6 +58,9 @@ struct ioreq_server {
     struct rangeset        *range[NR_IO_RANGE_TYPES];
     bool                   enabled;
     uint8_t                bufioreq_handling;
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[2];
 };
 
 static inline paddr_t ioreq_mmio_first_byte(const ioreq_t *p)
diff --git a/xen/include/xen/lib/x86/cpu-policy.h b/xen/include/xen/lib/x86/cpu-policy.h
index 6d5e9edd269b..82e1fd43b9f3 100644
--- a/xen/include/xen/lib/x86/cpu-policy.h
+++ b/xen/include/xen/lib/x86/cpu-policy.h
@@ -87,7 +87,7 @@ const char *x86_cpuid_vendor_to_str(unsigned int vendor);
 
 #define CPUID_GUEST_NR_BASIC      (0xdu + 1)
 #define CPUID_GUEST_NR_CACHE      (5u + 1)
-#define CPUID_GUEST_NR_FEAT       (2u + 1)
+#define CPUID_GUEST_NR_FEAT       (3u + 1)
 #define CPUID_GUEST_NR_TOPO       (1u + 1)
 #define CPUID_GUEST_NR_XSTATE     (62u + 1)
 #define CPUID_GUEST_NR_EXTD_INTEL (0x8u + 1)
@@ -371,6 +371,9 @@ struct cpu_policy
 
     /* Value calculated from raw data above. */
     uint8_t x86_vendor;
+
+    /* Reserved space */
+    uint64_t _rsvd_livepatch[2];
 };
 
 struct cpu_policy_errors
diff --git a/xen/lib/x86/cpuid.c b/xen/lib/x86/cpuid.c
index 07e550191448..87587f1c493d 100644
--- a/xen/lib/x86/cpuid.c
+++ b/xen/lib/x86/cpuid.c
@@ -63,6 +63,8 @@ const char *x86_cpuid_vendor_to_str(unsigned int vendor)
 void x86_cpu_policy_to_featureset(
     const struct cpu_policy *p, uint32_t fs[FEATURESET_NR_ENTRIES])
 {
+    unsigned int i;
+
     fs[FEATURESET_1d]        = p->basic._1d;
     fs[FEATURESET_1c]        = p->basic._1c;
     fs[FEATURESET_e1d]       = p->extd.e1d;
@@ -81,6 +83,10 @@ void x86_cpu_policy_to_featureset(
     fs[FEATURESET_7d1]       = p->feat._7d1;
     fs[FEATURESET_m10Al]     = p->arch_caps.lo;
     fs[FEATURESET_m10Ah]     = p->arch_caps.hi;
+
+    /* Zero reserved featureset words */
+    for ( i = FEATURESET_m10Ah + 1; i < FEATURESET_NR_ENTRIES; i++ )
+        fs[i] = 0;
 }
 
 void x86_cpu_featureset_to_policy(
diff --git a/xen/tools/gen-cpuid.py b/xen/tools/gen-cpuid.py
index 72cf11654ba9..151bb9a15fed 100755
--- a/xen/tools/gen-cpuid.py
+++ b/xen/tools/gen-cpuid.py
@@ -127,6 +127,8 @@ def parse_definitions(state):
         raise Fail("Feature %s (%d*32+%d) exceeds FEATURESET_NR_ENTRIES (%d)"
                    % (max_name, max_val >> 5, max_val & 31, state.nr_entries))
 
+    state.nr_entries += 4 # reserved_entries_num
+
 def featureset_to_uint32s(fs, nr):
     """ Represent a featureset as a list of C-compatible uint32_t's """
 
