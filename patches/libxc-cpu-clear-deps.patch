From: Andrew Cooper <andrew.cooper3@citrix.com>
Subject: Libxc CPU policy helpers

Factor clear_deep_deps() out of xc_cpuid_apply_policy() so it can be reused.

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>

diff --git a/tools/libxc/xc_cpuid_x86.c b/tools/libxc/xc_cpuid_x86.c
index 2f7b4a32223c..5ebe13e1e91d 100644
--- a/tools/libxc/xc_cpuid_x86.c
+++ b/tools/libxc/xc_cpuid_x86.c
@@ -41,6 +41,41 @@ enum {
 #define clear_feature(idx, dst) ((dst) &= ~bitmaskof(idx))
 #define set_feature(idx, dst)   ((dst) |=  bitmaskof(idx))
 
+/*
+ * For each bit clear in @featureset which has dependent features, clear those
+ * too.
+ */
+static void clear_deep_deps(uint32_t *featureset, size_t len /* words */)
+{
+    static const uint32_t deep_features[] = INIT_DEEP_FEATURES;
+
+    uint32_t disabled_features[ARRAY_SIZE(deep_features)];
+    size_t i, b;
+
+    len = min(len, ARRAY_SIZE(deep_features));
+
+    /* Identify disabled features that have dependent features. */
+    for ( i = 0; i < len; ++i )
+        disabled_features[i] = ~featureset[i] & deep_features[i];
+
+    /* For each set bit in disabled that has dependent features ... */
+    for ( b = 0; b < (len * 32); ++b )
+    {
+        const uint32_t *dfs;
+
+        if ( !test_bit(b, disabled_features) ||
+             !(dfs = x86_cpu_policy_lookup_deep_deps(b)) )
+            continue;
+
+        /* ... disable all those features too */
+        for ( i = 0; i < len; ++i )
+        {
+            featureset[i] &= ~dfs[i];
+            disabled_features[i] &= ~dfs[i];
+        }
+    }
+}
+
 int xc_get_cpu_levelling_caps(xc_interface *xch, uint32_t *caps)
 {
     DECLARE_SYSCTL;
@@ -509,10 +544,8 @@ int xc_cpuid_apply_policy(xc_interface *xch, uint32_t domid,
 
     if ( featureset )
     {
-        uint32_t disabled_features[FEATURESET_NR_ENTRIES],
-            feat[FEATURESET_NR_ENTRIES] = {};
-        static const uint32_t deep_features[] = INIT_DEEP_FEATURES;
-        unsigned int i, b;
+        uint32_t feat[FEATURESET_NR_ENTRIES] = {};
+        unsigned int i;
 
         /*
          * The user supplied featureset may be shorter or longer than
@@ -529,24 +562,7 @@ int xc_cpuid_apply_policy(xc_interface *xch, uint32_t domid,
 
         memcpy(feat, featureset, sizeof(*featureset) * user_len);
 
-        /* Disable deep dependencies of disabled features. */
-        for ( i = 0; i < ARRAY_SIZE(disabled_features); ++i )
-            disabled_features[i] = ~feat[i] & deep_features[i];
-
-        for ( b = 0; b < sizeof(disabled_features) * CHAR_BIT; ++b )
-        {
-            const uint32_t *dfs;
-
-            if ( !test_bit(b, disabled_features) ||
-                 !(dfs = x86_cpu_policy_lookup_deep_deps(b)) )
-                continue;
-
-            for ( i = 0; i < ARRAY_SIZE(disabled_features); ++i )
-            {
-                feat[i] &= ~dfs[i];
-                disabled_features[i] &= ~dfs[i];
-            }
-        }
+        clear_deep_deps(feat, user_len);
 
         x86_cpu_featureset_to_policy(feat, p);
     }
