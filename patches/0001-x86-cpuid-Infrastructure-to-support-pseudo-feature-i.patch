From 7f47042883de6b6bbbf9d77c898f47bcc3cb43b9 Mon Sep 17 00:00:00 2001
From: Andrew Cooper <andrew.cooper3@citrix.com>
Date: Tue, 4 Oct 2022 15:01:22 +0100
Subject: x86/cpuid: Infrastructure to support pseudo feature identifiers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

A future change will want a cpuid-like identifier which doesn't have a mapping
to a feature bit.

 * Pass the feature name into the parse callback.
 * Exclude a feature value of ~0u from falling into the general set/clear bit
   paths.
 * In gen-cpuid.py, insert a placeholder to collect all the pseudo feature
   names.

No practical change.

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
diff --git a/xen/arch/x86/cpu-policy.c b/xen/arch/x86/cpu-policy.c
index 32a8e1a7bd32..e28bfad2f61f 100644
--- a/xen/arch/x86/cpu-policy.c
+++ b/xen/arch/x86/cpu-policy.c
@@ -42,7 +42,8 @@ static const struct feature_name {
  * function pointer call in the middle of the loop.
  */
 static int __init always_inline parse_cpuid(
-    const char *s, void (*callback)(unsigned int feat, bool val))
+    const char *s, void (*callback)(const char *name,
+                                    unsigned int feat, bool val))
 {
     const char *ss;
     int val, rc = 0;
@@ -84,7 +85,7 @@ static int __init always_inline parse_cpuid(
 
             if ( (val = parse_boolean(mid->name, s, ss)) >= 0 )
             {
-                callback(mid->bit, val);
+                callback(mid->name, mid->bit, val);
                 mid = NULL;
             }
 
@@ -104,8 +105,12 @@ static int __init always_inline parse_cpuid(
     return rc;
 }
 
-static void __init _parse_xen_cpuid(unsigned int feat, bool val)
+static void __init _parse_xen_cpuid(
+    const char *name, unsigned int feat, bool val)
 {
+    if ( unlikely(feat == ~0u) )
+        return;
+
     if ( !val )
         setup_clear_cpu_cap(feat);
     else if ( feat == X86_FEATURE_RDRAND &&
@@ -123,8 +128,12 @@ static bool __initdata dom0_cpuid_cmdline;
 static uint32_t __initdata dom0_enable_feat[FSCAPINTS];
 static uint32_t __initdata dom0_disable_feat[FSCAPINTS];
 
-static void __init _parse_dom0_cpuid(unsigned int feat, bool val)
+static void __init _parse_dom0_cpuid(
+    const char *name, unsigned int feat, bool val)
 {
+    if ( unlikely(feat == ~0u) )
+        return;
+
     __set_bit  (feat, val ? dom0_enable_feat  : dom0_disable_feat);
     __clear_bit(feat, val ? dom0_disable_feat : dom0_enable_feat );
 }
diff --git a/xen/tools/gen-cpuid.py b/xen/tools/gen-cpuid.py
index 342c5aefb312..01587364f1bd 100755
--- a/xen/tools/gen-cpuid.py
+++ b/xen/tools/gen-cpuid.py
@@ -312,6 +312,19 @@ def crunch_numbers(state):
         AMD_STIBP: [STIBP_ALWAYS],
     }
 
+    #
+    # Pseudo feature names.  These don't map to a feature bit, but are
+    # inserted into the values dictionary so they can be parsed and handled
+    # specially
+    #
+    pseduo_names = (
+    )
+
+    for n in pseduo_names:
+        if n in state.values:
+            raise Fail("Pseduo feature name %s aliases real feature" % (n, ))
+        state.values[n] = 0xffffffff
+
     deep_features = tuple(sorted(deps.keys()))
     state.deep_deps = {}
 
