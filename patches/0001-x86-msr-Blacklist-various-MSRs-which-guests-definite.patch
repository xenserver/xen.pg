From be45a36a5d6ae99eb1c2865aa4b4f5fd9b20b1ed Mon Sep 17 00:00:00 2001
From: Andrew Cooper <andrew.cooper3@citrix.com>
Date: Wed, 7 Mar 2018 18:58:36 +0000
Subject: [PATCH] x86/msr: Blacklist various MSRs which guests definitely
 shouldn't be using

The main purpose is to blacklist the Intel Resource Director Technology MSRs.
We do not yet virtualise support for guests, but Linux has been observed to
probe for these MSRs without checking CPUID first.

The architecturally inaccessable ranges don't need to fall back into the
legacy ranges, because they are not going to eventually evaluate as
accessible.

The Silicon Debug interface will probably never be virtualised for guests, but
doesn't want to leak through from real hardware.  SGX isn't yet virtualised,
but likely will be in the future.

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
[dropped the blacklist bits]
Signed-off-by: Sergey Dyasli <sergey.dyasli@citrix.com>
diff --git a/xen/arch/x86/msr.c b/xen/arch/x86/msr.c
index c0d363dbfb0d..5278adf58fee 100644
--- a/xen/arch/x86/msr.c
+++ b/xen/arch/x86/msr.c
@@ -212,6 +212,18 @@ int guest_rdmsr(struct vcpu *v, uint32_t msr, uint64_t *val)
                                    ARRAY_SIZE(msrs->dr_mask))];
         break;
 
+        /* Specific blacklisted MSRs while the legacy handlers still exist. */
+    case MSR_SGX_PUBKEY_HASH(0) ... MSR_SGX_PUBKEY_HASH(3):
+    case MSR_SGX_SVN_STATUS:
+    case MSR_DEBUG_INTERFACE:
+    case MSR_L3_QOS_CFG:
+    case MSR_L2_QOS_CFG:
+    case MSR_QM_EVTSEL:
+    case MSR_QM_CTR:
+    case MSR_PQR_ASSOC:
+    case MSR_CAT_MASK_START ... MSR_CAT_MASK_LAST:
+        goto gp_fault;
+
         /*
          * TODO: Implement when we have better topology representation.
     case MSR_INTEL_CORE_THREAD_COUNT:
@@ -459,6 +471,18 @@ int guest_wrmsr(struct vcpu *v, uint32_t msr, uint64_t val)
             wrmsrl(msr, val);
         break;
 
+        /* Specific blacklisted MSRs while the legacy handlers still exist. */
+    case MSR_SGX_PUBKEY_HASH(0) ... MSR_SGX_PUBKEY_HASH(3):
+    case MSR_SGX_SVN_STATUS:
+    case MSR_DEBUG_INTERFACE:
+    case MSR_L3_QOS_CFG:
+    case MSR_L2_QOS_CFG:
+    case MSR_QM_EVTSEL:
+    case MSR_QM_CTR:
+    case MSR_PQR_ASSOC:
+    case MSR_CAT_MASK_START ... MSR_CAT_MASK_LAST:
+        goto gp_fault;
+
     default:
         return X86EMUL_UNHANDLEABLE;
     }
diff --git a/xen/include/asm-x86/msr-index.h b/xen/include/asm-x86/msr-index.h
index 3be06f3dcc0a..772922a7a978 100644
--- a/xen/include/asm-x86/msr-index.h
+++ b/xen/include/asm-x86/msr-index.h
@@ -53,6 +53,8 @@
 #define PRED_CMD_IBPB			(_AC(1, ULL) << 0)
 #define PRED_CMD_SBPB			(_AC(1, ULL) << 7)
 
+#define MSR_SGX_PUBKEY_HASH(x)		(0x0000008c + (x)) /* 0 ... 3 */
+
 #define MSR_ARCH_CAPABILITIES		0x0000010a
 #define ARCH_CAPS_RDCL_NO		(_AC(1, ULL) << 0)
 #define ARCH_CAPS_EIBRS			(_AC(1, ULL) << 1)
@@ -114,6 +116,18 @@
 /* Lower 6 bits define the format of the address in the LBR stack */
 #define MSR_IA32_PERF_CAP_LBR_FORMAT	0x3f
 
+#define MSR_SGX_SVN_STATUS             0x00000500
+
+#define MSR_DEBUG_INTERFACE            0x00000c80
+
+#define MSR_L3_QOS_CFG                 0x00000c81
+#define MSR_L2_QOS_CFG                 0x00000c82
+#define MSR_QM_EVTSEL                  0x00000c8d
+#define MSR_QM_CTR                     0x00000c8e
+#define MSR_PQR_ASSOC                  0x00000c8f
+#define MSR_CAT_MASK_START             0x00000c90
+#define MSR_CAT_MASK_LAST              0x00000d8f
+
 /*
  * Intel Runtime Average Power Limiting (RAPL) interface.  Power plane base
  * addresses (MSR_*_POWER_LIMIT) are model specific, but have so-far been
