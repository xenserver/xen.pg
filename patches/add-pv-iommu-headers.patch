diff --git a/xen/arch/x86/hypercall.c b/xen/arch/x86/hypercall.c
index 3b749c61f9..c2877c6f87 100644
--- a/xen/arch/x86/hypercall.c
+++ b/xen/arch/x86/hypercall.c
@@ -69,6 +69,7 @@ const hypercall_args_t hypercall_args_table[NR_hypercalls] =
     ARGS(dm_op, 3),
     ARGS(mca, 1),
     ARGS(arch_1, 1),
+    ARGS(iommu_op, 2),
 };
 
 #undef COMP
diff --git a/xen/arch/x86/pv/hypercall.c b/xen/arch/x86/pv/hypercall.c
index 55a37d3698..858386fbdb 100644
--- a/xen/arch/x86/pv/hypercall.c
+++ b/xen/arch/x86/pv/hypercall.c
@@ -86,6 +86,7 @@ const hypercall_table_t pv_hypercall_table[] = {
 #endif
     HYPERCALL(mca),
     HYPERCALL(arch_1),
+    HYPERCALL(iommu_op),
 };
 
 #undef do_arch_1
diff --git a/xen/common/Makefile b/xen/common/Makefile
index 62b34e69e9..732ccf1b67 100644
--- a/xen/common/Makefile
+++ b/xen/common/Makefile
@@ -32,6 +32,7 @@ obj-y += page_alloc.o
 obj-$(CONFIG_HAS_PDX) += pdx.o
 obj-$(CONFIG_PERF_COUNTERS) += perfc.o
 obj-y += preempt.o
+obj-y += pv_iommu.o
 obj-y += random.o
 obj-y += rangeset.o
 obj-y += radix-tree.o
diff --git a/xen/common/pv_iommu.c b/xen/common/pv_iommu.c
new file mode 100644
index 0000000000..304fccf349
--- /dev/null
+++ b/xen/common/pv_iommu.c
@@ -0,0 +1,38 @@
+/******************************************************************************
+ * common/pv_iommu.c
+ * 
+ * Paravirtualised IOMMU functionality
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <xen/guest_access.h>
+
+#define ret_t long
+
+ret_t do_iommu_op(XEN_GUEST_HANDLE_PARAM(void) arg, unsigned int count)
+{
+    return -ENOSYS;
+}
+
+/*
+ * Local variables:
+ * mode: C
+ * c-file-style: "BSD"
+ * c-basic-offset: 4
+ * tab-width: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
+
diff --git a/xen/include/public/xen.h b/xen/include/public/xen.h
index d2198dffad..2a6c5952f8 100644
--- a/xen/include/public/xen.h
+++ b/xen/include/public/xen.h
@@ -141,6 +141,7 @@ DEFINE_XEN_GUEST_HANDLE(xen_ulong_t);
 #define __HYPERVISOR_arch_6               54
 #define __HYPERVISOR_arch_7               55
 
+#define __HYPERVISOR_iommu_op             56
 /* ` } */
 
 /*
diff --git a/xen/include/xen/hypercall.h b/xen/include/xen/hypercall.h
index d82a293377..f817e0e66d 100644
--- a/xen/include/xen/hypercall.h
+++ b/xen/include/xen/hypercall.h
@@ -45,6 +45,10 @@ extern long
 do_platform_op(
     XEN_GUEST_HANDLE_PARAM(xen_platform_op_t) u_xenpf_op);
 
+extern long
+do_iommu_op(
+    XEN_GUEST_HANDLE_PARAM(void) arg, unsigned int count);
+
 /*
  * To allow safe resume of do_memory_op() after preemption, we need to know
  * at what point in the page list to resume. For this purpose I steal the
