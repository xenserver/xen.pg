diff --git a/tools/include/xenctrl.h b/tools/include/xenctrl.h
index faec1dd82453..20f2cdcd9e1c 100644
--- a/tools/include/xenctrl.h
+++ b/tools/include/xenctrl.h
@@ -1855,7 +1855,8 @@ int xc_cpuid_apply_policy(xc_interface *xch,
                           uint32_t domid, bool restore,
                           const uint32_t *featureset,
                           unsigned int nr_features, bool pae, bool itsc,
-                          bool nested_virt, const struct xc_xend_cpuid *xend,
+                          bool nested_virt, unsigned int cps,
+                          const struct xc_xend_cpuid *xend,
                           const struct xc_msr *msr);
 int xc_mca_op(xc_interface *xch, struct xen_mc *mc);
 int xc_mca_op_inject_v2(xc_interface *xch, unsigned int flags,
diff --git a/tools/libs/guest/xg_cpuid_x86.c b/tools/libs/guest/xg_cpuid_x86.c
index 29ccd73e0406..e3e8d634929b 100644
--- a/tools/libs/guest/xg_cpuid_x86.c
+++ b/tools/libs/guest/xg_cpuid_x86.c
@@ -583,7 +583,7 @@ static int xc_msr_policy(xc_interface *xch, domid_t domid,
 
 int xc_cpuid_apply_policy(xc_interface *xch, uint32_t domid, bool restore,
                           const uint32_t *featureset, unsigned int nr_features,
-                          bool pae, bool itsc, bool nested_virt,
+                          bool pae, bool itsc, bool nested_virt, unsigned int cps,
                           const struct xc_xend_cpuid *xend,
                           const struct xc_msr *msr)
 {
@@ -760,6 +760,46 @@ int xc_cpuid_apply_policy(xc_interface *xch, uint32_t domid, bool restore,
             }
             break;
         }
+
+        /*
+         * BODGE: XenServer legacy cores-per-socket.  Needs to remain like
+         * this for backwards compatibility with migration streams which lack
+         * CPUID data.
+         */
+        if ( cps > 0 )
+        {
+            p->basic.htt = true;
+
+            /*
+             * This (cps * 2) is wrong, and contrary to the statement in the
+             * AMD manual.  However, Xen unconditionally offers Intel-style
+             * APIC IDs (odd IDs for hyperthreads) which breaks the AMD APIC
+             * Enumeration Requirements.
+             *
+             * Fake up cores-per-socket as a socket with twice as many cores
+             * as expected, with every odd core offline.
+             */
+            p->basic.lppp = cps * 2;
+
+            switch ( p->x86_vendor )
+            {
+            case X86_VENDOR_INTEL:
+                for ( i = 0; (p->cache.subleaf[i].type &&
+                              i < ARRAY_SIZE(p->cache.raw)); ++i )
+                {
+                    p->cache.subleaf[i].cores_per_package = (cps * 2) - 1;
+                    p->cache.subleaf[i].threads_per_cache = 0;
+                }
+                break;
+
+            case X86_VENDOR_AMD:
+            case X86_VENDOR_HYGON:
+                p->extd.cmp_legacy = true;
+                p->extd.apic_id_size = 0;
+                p->extd.nc = (cps * 2) - 1;
+                break;
+            }
+        }
     }
 
     rc = x86_cpuid_copy_to_buffer(p, leaves, &nr_leaves);
diff --git a/tools/libs/light/libxl_cpuid.c b/tools/libs/light/libxl_cpuid.c
index 86a08f29a19c..171b8e646562 100644
--- a/tools/libs/light/libxl_cpuid.c
+++ b/tools/libs/light/libxl_cpuid.c
@@ -508,7 +508,7 @@ int libxl__cpuid_legacy(libxl_ctx *ctx, uint32_t domid, bool restore,
             info->tsc_mode == LIBXL_TSC_MODE_ALWAYS_EMULATE);
 
     r = xc_cpuid_apply_policy(ctx->xch, domid, restore, NULL, 0,
-                              pae, itsc, nested_virt,
+                              pae, itsc, nested_virt, 0,
                               info->cpuid ? info->cpuid->cpuid : NULL,
                               info->cpuid ? info->cpuid->msr : NULL);
     if (r)
