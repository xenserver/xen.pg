nr_extents is changing dynamically between several consecutive do_memory_op
calls within a single compat DMC hypercall. This breaks the invariant that
do_memory_op is called originally with the final nr_extents from the guest.

Workaround that breakage by making a complementary call to pv_shim_online_memory
in compat layer and always calling pv_shim_offline_memory regardless of
current hypercall preemption status.

diff --git a/xen/arch/x86/pv/shim.c b/xen/arch/x86/pv/shim.c
index ac17533..9a578b1 100644
--- a/xen/arch/x86/pv/shim.c
+++ b/xen/arch/x86/pv/shim.c
@@ -918,6 +918,9 @@ void pv_shim_online_memory(unsigned int nr, unsigned int order)
     struct page_info *page, *tmp;
     PAGE_LIST_HEAD(list);
 
+    if ( !nr )
+        return;
+
     spin_lock(&balloon_lock);
     page_list_for_each_safe ( page, tmp, &balloon )
     {
diff --git a/xen/common/compat/memory.c b/xen/common/compat/memory.c
index 3851f75..cd2e26b 100644
--- a/xen/common/compat/memory.c
+++ b/xen/common/compat/memory.c
@@ -9,6 +9,10 @@ EMIT_FILE;
 #include <asm/current.h>
 #include <compat/memory.h>
 
+#ifdef CONFIG_X86
+#include <asm/guest.h>
+#endif
+
 #define xen_domid_t domid_t
 #define compat_domid_t domid_compat_t
 CHECK_TYPE(domid);
@@ -144,7 +148,11 @@ int compat_memory_op(unsigned int cmd, XEN_GUEST_HANDLE_PARAM(void) compat)
                 nat.rsrv->nr_extents = end_extent;
                 ++split;
             }
-
+#ifdef CONFIG_X86
+           if ( pv_shim && op != XENMEM_decrease_reservation && !start_extent )
+               pv_shim_online_memory(cmp.rsrv.nr_extents - nat.rsrv->nr_extents,
+                                     cmp.rsrv.extent_order);
+#endif
             break;
 
         case XENMEM_exchange:
diff --git a/xen/common/memory.c b/xen/common/memory.c
index 70ab867..85fab5c 100644
--- a/xen/common/memory.c
+++ b/xen/common/memory.c
@@ -1216,22 +1216,16 @@ long do_memory_op(unsigned long cmd, XEN_GUEST_HANDLE_PARAM(void) arg)
 
         rc = args.nr_done;
 
-        if ( args.preempted )
-            return hypercall_create_continuation(
-                __HYPERVISOR_memory_op, "lh",
-                op | (rc << MEMOP_EXTENT_SHIFT), arg);
-
 #ifdef CONFIG_X86
         if ( pv_shim && op == XENMEM_decrease_reservation )
-            /*
-             * Only call pv_shim_offline_memory when the hypercall has
-             * finished. Note that nr_done is used to cope in case the
-             * hypercall has failed and only part of the extents where
-             * processed.
-             */
-            pv_shim_offline_memory(args.nr_done, args.extent_order);
+            pv_shim_offline_memory(args.nr_done - start_extent, args.extent_order);
 #endif
 
+        if ( args.preempted )
+           return hypercall_create_continuation(
+                __HYPERVISOR_memory_op, "lh",
+                op | (rc << MEMOP_EXTENT_SHIFT), arg);
+
         break;
 
     case XENMEM_exchange:
