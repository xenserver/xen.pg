From 601509a76f4e2c6d7679c92bfc2d0f168388a14c Mon Sep 17 00:00:00 2001
From: Sergey Dyasli <sergey.dyasli@citrix.com>
Date: Tue, 21 Aug 2018 16:42:48 +0100
Subject: [PATCH] hvmloader/acpi: enable TPM by default

Signed-off-by: Sergey Dyasli <sergey.dyasli@citrix.com>
diff --git a/tools/libacpi/acpi2_0.h b/tools/libacpi/acpi2_0.h
index 2619ba3..01d9aea 100644
--- a/tools/libacpi/acpi2_0.h
+++ b/tools/libacpi/acpi2_0.h
@@ -122,6 +122,30 @@ struct acpi_20_tcpa {
 #define ACPI_2_0_TCPA_LAML_SIZE (64*1024)
 
 /*
+ * TPM2
+ */
+struct Acpi20TPM2 {
+    struct acpi_header header;
+    uint16_t platform_class;
+    uint16_t reserved;
+    uint64_t control_area_address;
+    uint32_t start_method;
+    uint8_t start_method_params[12];
+    uint32_t log_area_minimum_length;
+    uint64_t log_area_start_address;
+};
+#define TPM2_ACPI_CLASS_CLIENT      0
+
+#define TPM2_START_METHOD_MMIO      6
+#define TPM2_START_METHOD_CRB       7
+
+#define TPM_CRB_ADDR_BASE           0xFED40000
+#define TPM_CRB_ADDR_CTRL           (TPM_CRB_ADDR_BASE + 0x40)
+
+#define TPM_LOG_AREA_MINIMUM_SIZE   (64 << 10)
+#define TPM_LOG_SIZE                (64 << 10)
+
+/*
  * Fixed ACPI Description Table Structure (FADT) in ACPI 1.0.
  */
 struct acpi_10_fadt {
@@ -431,6 +455,7 @@ struct acpi_20_slit {
 #define ACPI_2_0_RSDT_SIGNATURE ASCII32('R','S','D','T')
 #define ACPI_2_0_XSDT_SIGNATURE ASCII32('X','S','D','T')
 #define ACPI_2_0_TCPA_SIGNATURE ASCII32('T','C','P','A')
+#define ACPI_2_0_TPM2_SIGNATURE ASCII32('T','P','M','2')
 #define ACPI_2_0_HPET_SIGNATURE ASCII32('H','P','E','T')
 #define ACPI_2_0_WAET_SIGNATURE ASCII32('W','A','E','T')
 #define ACPI_2_0_SRAT_SIGNATURE ASCII32('S','R','A','T')
@@ -444,6 +469,7 @@ struct acpi_20_slit {
 #define ACPI_2_0_RSDT_REVISION 0x01
 #define ACPI_2_0_XSDT_REVISION 0x01
 #define ACPI_2_0_TCPA_REVISION 0x02
+#define ACPI_2_0_TMP2_REVISION 0x04
 #define ACPI_2_0_HPET_REVISION 0x01
 #define ACPI_2_0_WAET_REVISION 0x01
 #define ACPI_1_0_FADT_REVISION 0x01
diff --git a/tools/libacpi/build.c b/tools/libacpi/build.c
index d56ed65..952226f 100644
--- a/tools/libacpi/build.c
+++ b/tools/libacpi/build.c
@@ -419,6 +419,11 @@ static int construct_secondary_tables(struct acpi_ctxt *ctxt,
          (config->tis_hdr[0] != 0 && config->tis_hdr[0] != 0xffff) &&
          (config->tis_hdr[1] != 0 && config->tis_hdr[1] != 0xffff) )
     {
+        struct Acpi20TPM2 *tpm2;
+        void *log;
+
+        printf("Building TPM TCPA and SSDT\n");
+
         ssdt = ctxt->mem_ops.alloc(ctxt, sizeof(ssdt_tpm), 16);
         if (!ssdt) return -1;
         memcpy(ssdt, ssdt_tpm, sizeof(ssdt_tpm));
@@ -437,7 +442,7 @@ static int construct_secondary_tables(struct acpi_ctxt *ctxt,
         tcpa->header.oem_revision = ACPI_OEM_REVISION;
         tcpa->header.creator_id   = ACPI_CREATOR_ID;
         tcpa->header.creator_revision = ACPI_CREATOR_REVISION;
-        if ( (lasa = ctxt->mem_ops.alloc(ctxt, ACPI_2_0_TCPA_LAML_SIZE, 16)) != NULL )
+        if ( (lasa = ctxt->mem_ops.alloc(ctxt, ACPI_2_0_TCPA_LAML_SIZE, 4096)) != NULL )
         {
             tcpa->lasa = ctxt->mem_ops.v2p(ctxt, lasa);
             tcpa->laml = ACPI_2_0_TCPA_LAML_SIZE;
@@ -446,6 +451,36 @@ static int construct_secondary_tables(struct acpi_ctxt *ctxt,
                          offsetof(struct acpi_header, checksum),
                          tcpa->header.length);
         }
+
+        tpm2 = ctxt->mem_ops.alloc(ctxt, sizeof(struct Acpi20TPM2), 16);
+        if (!tpm2) return -1;
+        memset(tpm2, 0, sizeof(*tpm2));
+        table_ptrs[nr_tables++] = ctxt->mem_ops.v2p(ctxt, tpm2);
+
+        tpm2->header.signature = ACPI_2_0_TPM2_SIGNATURE;
+        tpm2->header.length    = sizeof(*tpm2);
+        tpm2->header.revision  = ACPI_2_0_TMP2_REVISION;
+        fixed_strcpy(tpm2->header.oem_id, ACPI_OEM_ID);
+        fixed_strcpy(tpm2->header.oem_table_id, ACPI_OEM_TABLE_ID);
+        tpm2->header.oem_revision = ACPI_OEM_REVISION;
+        tpm2->header.creator_id   = ACPI_CREATOR_ID;
+        tpm2->header.creator_revision = ACPI_CREATOR_REVISION;
+
+        tpm2->platform_class = TPM2_ACPI_CLASS_CLIENT;
+        tpm2->control_area_address = TPM_CRB_ADDR_CTRL;
+        tpm2->start_method = TPM2_START_METHOD_CRB;
+        tpm2->log_area_minimum_length = TPM_LOG_AREA_MINIMUM_SIZE;
+        if ( (log = ctxt->mem_ops.alloc(ctxt, TPM_LOG_SIZE, 4096)) == NULL )
+            printf("TPM2 alloc error\n");
+
+        memset(log, 0, TPM_LOG_SIZE);
+        tpm2->log_area_start_address = ctxt->mem_ops.v2p(ctxt, log);
+
+        set_checksum(tpm2,
+                     offsetof(struct acpi_header, checksum),
+                     tpm2->header.length);
+
+        printf("Added TPM2 table\n");
     }
 
     /* SRAT and SLIT */
diff --git a/tools/libacpi/ssdt_tpm.asl b/tools/libacpi/ssdt_tpm.asl
index a0fb1fd..f8f4ea7 100644
--- a/tools/libacpi/ssdt_tpm.asl
+++ b/tools/libacpi/ssdt_tpm.asl
@@ -18,11 +18,19 @@
 
 DefinitionBlock ("SSDT_TPM.aml", "SSDT", 2, "Xen", "HVM", 0)
 {
-    Device (TPM) {
-        Name (_HID, EisaId ("PNP0C31"))
-        Name (_CRS, ResourceTemplate ()
+    Device (TPM)
+    {
+        Name (_HID, "MSFT0101" /* TPM 2.0 Security Device */)  // _HID: Hardware ID
+        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
         {
-            Memory32Fixed (ReadWrite, 0xFED40000, 0x5000,)
+            Memory32Fixed (ReadWrite,
+                0xFED40000,         // Address Base
+                0x00001000,         // Address Length
+                )
         })
+        Method (_STA, 0, NotSerialized)  // _STA: Status
+        {
+            Return (0x0F)
+        }
     }
 }
