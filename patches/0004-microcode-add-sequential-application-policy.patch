From 92d16c30d15388f63c05326f2eb2c10a1a0e2c8d Mon Sep 17 00:00:00 2001
From: Sergey Dyasli <sergey.dyasli@citrix.com>
Date: Wed, 13 Mar 2019 15:40:24 +0000
Subject: [PATCH 4/8] microcode: add sequential application policy

This patch was sent upstream to Chao. I expect it to be included in v7.

Signed-off-by: Sergey Dyasli <sergey.dyasli@citrix.com>
diff --git a/tools/libxc/include/xenctrl.h b/tools/libxc/include/xenctrl.h
index adfde0f93e3b..5dd81c47e04a 100644
--- a/tools/libxc/include/xenctrl.h
+++ b/tools/libxc/include/xenctrl.h
@@ -1245,7 +1245,8 @@ int xc_physinfo(xc_interface *xch, xc_physinfo_t *info);
 int xc_cputopoinfo(xc_interface *xch, unsigned *max_cpus,
                    xc_cputopo_t *cputopo);
 int xc_platform_op(xc_interface *xch, struct xen_platform_op *op);
-int xc_microcode_update(xc_interface *xch, const void *buf, size_t len);
+int xc_microcode_update(xc_interface *xch, const void *buf, size_t len,
+                        uint32_t strategy);
 int xc_numainfo(xc_interface *xch, unsigned *max_nodes,
                 xc_meminfo_t *meminfo, uint32_t *distance);
 int xc_pcitopoinfo(xc_interface *xch, unsigned num_devs,
diff --git a/tools/libxc/xc_misc.c b/tools/libxc/xc_misc.c
index a1c5cacd8da2..b44f12e53309 100644
--- a/tools/libxc/xc_misc.c
+++ b/tools/libxc/xc_misc.c
@@ -226,7 +226,8 @@ int xc_physinfo(xc_interface *xch,
     return 0;
 }
 
-int xc_microcode_update(xc_interface *xch, const void *buf, size_t len)
+int xc_microcode_update(xc_interface *xch, const void *buf, size_t len,
+                        uint32_t strategy)
 {
     int ret;
     DECLARE_PLATFORM_OP;
@@ -240,6 +241,7 @@ int xc_microcode_update(xc_interface *xch, const void *buf, size_t len)
 
     platform_op.cmd = XENPF_microcode_update;
     platform_op.u.microcode.length = len;
+    platform_op.u.microcode.strategy = strategy;
     set_xen_guest_handle(platform_op.u.microcode.data, uc);
 
     ret = do_platform_op(xch, &platform_op);
diff --git a/tools/misc/xen-ucode.c b/tools/misc/xen-ucode.c
index c1dceaac6bb2..3225dd8782e7 100644
--- a/tools/misc/xen-ucode.c
+++ b/tools/misc/xen-ucode.c
@@ -68,6 +68,15 @@ void show_curr_cpu(FILE *f)
     xc_interface_close(xch);
 }
 
+static int parse_strategy(const char *arg)
+{
+    if ( !strcmp(arg, "parallel") )
+        return XENPF_microcode_parallel;
+    if ( !strcmp(arg, "sequential") )
+        return XENPF_microcode_sequential;
+    return -1;
+}
+
 int main(int argc, char *argv[])
 {
     int fd, ret;
@@ -75,6 +84,7 @@ int main(int argc, char *argv[])
     size_t len;
     struct stat st;
     xc_interface *xch;
+    int strategy;
 
     if ( argc >= 2 && !strcmp(argv[1], "show-cpu-info") )
     {
@@ -82,11 +92,11 @@ int main(int argc, char *argv[])
         return 0;
     }
 
-    if ( argc < 2 )
+    if ( argc < 3 || (strategy = parse_strategy(argv[2])) < 0 )
     {
         fprintf(stderr,
                 "xen-ucode: Xen microcode updating tool\n"
-                "Usage: %s <microcode blob>\n", argv[0]);
+                "Usage: %s <microcode blob> <parallel|sequential>\n", argv[0]);
         show_curr_cpu(stderr);
         return 0;
     }
@@ -123,7 +133,7 @@ int main(int argc, char *argv[])
         return errno;
     }
 
-    ret = xc_microcode_update(xch, buf, len);
+    ret = xc_microcode_update(xch, buf, len, strategy);
     if ( ret )
         fprintf(stderr, "Failed to update microcode. (err: %s)\n",
                 strerror(errno));
diff --git a/xen/arch/x86/microcode.c b/xen/arch/x86/microcode.c
index 3666e4333344..811f0da33a2a 100644
--- a/xen/arch/x86/microcode.c
+++ b/xen/arch/x86/microcode.c
@@ -36,6 +36,8 @@
 #include <xen/earlycpio.h>
 #include <xen/watchdog.h>
 
+#include <public/platform.h>
+
 #include <asm/apic.h>
 #include <asm/delay.h>
 #include <asm/msr.h>
@@ -63,6 +65,10 @@ static signed int __initdata ucode_mod_idx;
 static bool_t __initdata ucode_mod_forced;
 static unsigned int nr_cores;
 
+static uint32_t application_strategy;
+/* The next CPU to perform a ucode update */
+static atomic_t next_cpu;
+
 /*
  * These states help to coordinate CPUs during loading an update.
  *
@@ -375,6 +381,22 @@ static int microcode_update_cpu(const struct microcode_patch *patch)
     return err;
 }
 
+static void sequential_set_next_cpu(void)
+{
+    unsigned int cpu;
+
+    /* Was this the last cpu? */
+    if ( (atomic_read(&cpu_out) + 1) == nr_cores )
+        return;
+
+    /* Select the next primary thread */
+    do {
+        cpu = atomic_read(&next_cpu);
+        atomic_set(&next_cpu, cpumask_next(cpu, &cpu_online_map));
+        cpu = atomic_read(&next_cpu);
+    } while ( cpu != cpumask_first(per_cpu(cpu_sibling_mask, cpu)) );
+}
+
 static bool wait_for_state(typeof(loading_state) state)
 {
     typeof(loading_state) cur_state;
@@ -403,16 +425,31 @@ static int secondary_nmi_work(void)
 
 static int primary_thread_work(const struct microcode_patch *patch)
 {
+    unsigned int cpu = smp_processor_id(), done;
     int ret;
 
-    cpumask_set_cpu(smp_processor_id(), &cpu_callin_map);
+    cpumask_set_cpu(cpu, &cpu_callin_map);
 
     if ( !wait_for_state(LOADING_ENTER) )
         return -EBUSY;
 
+    while ( application_strategy == XENPF_microcode_sequential &&
+            cpu != atomic_read(&next_cpu) )
+    {
+        done = atomic_read(&cpu_out);
+        if ( wait_for_condition(wait_cpu_callout, (done + 1),
+                                MICROCODE_UPDATE_TIMEOUT_US) )
+            panic("Timeout during sequential microcode update (finished %d/%d)",
+                  done, nr_cores);
+    }
+
     ret = microcode_ops->apply_microcode(patch);
     if ( !ret )
         atomic_inc(&cpu_updated);
+
+    if ( application_strategy == XENPF_microcode_sequential )
+        sequential_set_next_cpu();
+
     atomic_inc(&cpu_out);
 
     return ret;
@@ -525,6 +562,10 @@ static int control_thread_fn(const struct microcode_patch *patch)
     ret = microcode_ops->apply_microcode(patch);
     if ( !ret )
         atomic_inc(&cpu_updated);
+
+    if ( application_strategy == XENPF_microcode_sequential )
+        sequential_set_next_cpu();
+
     atomic_inc(&cpu_out);
 
     if ( ret == -EIO )
@@ -596,6 +637,7 @@ static int do_microcode_update(void *patch)
 }
 
 struct ucode_buf {
+    uint32_t strategy;
     unsigned int len;
     char buffer[];
 };
@@ -606,6 +648,7 @@ static long microcode_update_helper(void *data)
     struct ucode_buf *buffer = data;
     unsigned int cpu, updated;
     struct microcode_patch *patch;
+    uint32_t strategy = buffer->strategy;
 
     /* cpu_online_map must not change during update */
     if ( !get_cpu_maps() )
@@ -674,8 +717,13 @@ static long microcode_update_helper(void *data)
         if ( is_cpu_primary(cpu) )
             nr_cores++;
 
-    printk(XENLOG_INFO "%u cores are to update their microcode\n", nr_cores);
+    printk(XENLOG_INFO "%u cores are to update their microcode %s\n", nr_cores,
+           strategy == XENPF_microcode_parallel ? "in parallel" :
+                                                  "sequentially");
 
+    application_strategy = strategy;
+    if ( strategy == XENPF_microcode_sequential )
+        atomic_set(&next_cpu, cpumask_first(&cpu_online_map));
     /*
      * Late loading dance. Why the heavy-handed stop_machine effort?
      *
@@ -711,7 +759,8 @@ static long microcode_update_helper(void *data)
     return ret;
 }
 
-int microcode_update(XEN_GUEST_HANDLE_PARAM(const_void) buf, unsigned long len)
+int microcode_update(XEN_GUEST_HANDLE_PARAM(const_void) buf, unsigned long len,
+                     uint32_t strategy)
 {
     int ret;
     struct ucode_buf *buffer;
@@ -722,6 +771,10 @@ int microcode_update(XEN_GUEST_HANDLE_PARAM(const_void) buf, unsigned long len)
     if ( microcode_ops == NULL )
         return -EINVAL;
 
+    if ( strategy != XENPF_microcode_parallel &&
+         strategy != XENPF_microcode_sequential )
+        return -EINVAL;
+
     buffer = xmalloc_flex_struct(struct ucode_buf, buffer, len);
     if ( !buffer )
         return -ENOMEM;
@@ -733,6 +786,7 @@ int microcode_update(XEN_GUEST_HANDLE_PARAM(const_void) buf, unsigned long len)
         return -EFAULT;
     }
     buffer->len = len;
+    buffer->strategy = strategy;
 
     return continue_hypercall_on_cpu(smp_processor_id(),
                                      microcode_update_helper, buffer);
diff --git a/xen/arch/x86/platform_hypercall.c b/xen/arch/x86/platform_hypercall.c
index 131e2ef1ea78..9e12cca95391 100644
--- a/xen/arch/x86/platform_hypercall.c
+++ b/xen/arch/x86/platform_hypercall.c
@@ -283,7 +283,8 @@ ret_t do_platform_op(XEN_GUEST_HANDLE_PARAM(xen_platform_op_t) u_xenpf_op)
 
         ret = microcode_update(
                 guest_handle_to_param(data, const_void),
-                op->u.microcode.length);
+                op->u.microcode.length,
+                op->u.microcode.strategy);
     }
     break;
 
diff --git a/xen/include/asm-x86/processor.h b/xen/include/asm-x86/processor.h
index 31e2e466f003..8186436f4026 100644
--- a/xen/include/asm-x86/processor.h
+++ b/xen/include/asm-x86/processor.h
@@ -583,7 +583,8 @@ int guest_rdmsr_xen(const struct vcpu *v, uint32_t idx, uint64_t *val);
 int guest_wrmsr_xen(struct vcpu *v, uint32_t idx, uint64_t val);
 
 void microcode_set_module(unsigned int);
-int microcode_update(XEN_GUEST_HANDLE_PARAM(const_void), unsigned long len);
+int microcode_update(XEN_GUEST_HANDLE_PARAM(const_void), unsigned long len,
+                     uint32_t strategy);
 int early_microcode_update_cpu(void);
 int early_microcode_init(void);
 int microcode_update_one(void);
diff --git a/xen/include/public/platform.h b/xen/include/public/platform.h
index d0b22c89d992..8cd006099c1c 100644
--- a/xen/include/public/platform.h
+++ b/xen/include/public/platform.h
@@ -114,6 +114,9 @@ struct xenpf_microcode_update {
     /* IN variables. */
     XEN_GUEST_HANDLE(const_void) data;/* Pointer to microcode data */
     uint32_t length;                  /* Length of microcode data. */
+#define XENPF_microcode_parallel   0
+#define XENPF_microcode_sequential 1
+    uint32_t strategy;                /* Application strategy.     */
 };
 typedef struct xenpf_microcode_update xenpf_microcode_update_t;
 DEFINE_XEN_GUEST_HANDLE(xenpf_microcode_update_t);
