diff --git a/xen/common/sched/credit.c b/xen/common/sched/credit.c
index 4d3bd8cba6fc..5ec94178b1b6 100644
--- a/xen/common/sched/credit.c
+++ b/xen/common/sched/credit.c
@@ -225,6 +225,7 @@ struct csched_private {
     uint32_t credit;
     int credit_balance;
     unsigned int credits_per_tslice;
+    struct csched_dom * privdom;
 
     unsigned int master;
     struct timer master_ticker;
@@ -864,6 +865,62 @@ csched_res_pick(const struct scheduler *ops, const struct sched_unit *unit)
     return get_sched_res(_csched_cpu_pick(ops, unit, true));
 }
 
+/* Make sure that the privileged domain always has enough weight for its active
+ * vcpus to get one full pcpu each */
+static inline void __csched_adj_privdom_weight(struct csched_private *prv) {
+    struct csched_dom *sdom = prv->privdom;
+    int other_cpus;
+    unsigned int new_weight;
+#ifndef NDEBUG
+    unsigned int initial_weight;
+#endif
+
+    /* If privdom isn't being accounted for, or is the only active
+     * domain, we're done. */
+    if ( sdom == NULL
+         || list_empty(&sdom->active_sdom_elem)
+         || unlikely(prv->ncpus < 2)
+         || prv->weight == sdom->weight * sdom->active_unit_count )
+        return;
+
+    BUG_ON(prv->weight < sdom->weight * sdom->active_unit_count);
+
+#ifndef NDEBUG
+    initial_weight = sdom->weight;
+#endif
+
+    /* First, subtract current privdom weight from system weight */
+    prv->weight -= sdom->weight * sdom->active_unit_count;
+
+    /* Calculate how many cores to leave to others. */
+    other_cpus = prv->ncpus - sdom->active_unit_count;
+
+    /* Don't let privdomain have more than half the available cores */
+    if ( sdom->active_unit_count > other_cpus )
+    {
+        /* Privdomain total weight will be equal to the weight of all others,
+         * giving it 50% of available processing power. */
+        new_weight = prv->weight / sdom->active_unit_count;
+    }
+    else
+    {
+        /* Calculate new privdomain weight: "other" weight / "other" pcpus */
+        new_weight = prv->weight / other_cpus;
+    }
+
+    if ( new_weight > 0 )
+        sdom->weight = min(new_weight, 0xFFFFu);
+
+    /* Update system weight to reflect new dom0 weight */
+    prv->weight += sdom->weight * sdom->active_unit_count;
+
+#ifndef NDEBUG
+   if(0 && initial_weight != sdom->weight)
+        printk("%s: d%d weight %u -> %u\n",
+               __func__, sdom->dom->domain_id, initial_weight, sdom->weight);
+#endif
+}
+
 static inline void
 __csched_unit_acct_start(struct csched_private *prv, struct csched_unit *svc)
 {
@@ -885,6 +942,16 @@ __csched_unit_acct_start(struct csched_private *prv, struct csched_unit *svc)
         {
             list_add(&sdom->active_sdom_elem, &prv->active_sdom);
         }
+
+        /* is_privileged isn't set when dom0 is created, so check it here. */
+        if ( unlikely(prv->privdom == NULL)
+             && is_hardware_domain(sdom->dom) ) {
+            printk("%s: setting dom %d as the privileged domain\n",
+                   __func__, sdom->dom->domain_id);
+            prv->privdom = sdom;
+        }
+
+        __csched_adj_privdom_weight(prv);
     }
 
     TRACE_3D(TRC_CSCHED_ACCOUNT_START, sdom->dom->domain_id,
@@ -913,6 +980,7 @@ __csched_unit_acct_stop_locked(struct csched_private *prv,
         list_del_init(&sdom->active_sdom_elem);
     }
 
+    __csched_adj_privdom_weight(prv);
     TRACE_3D(TRC_CSCHED_ACCOUNT_STOP, sdom->dom->domain_id,
              svc->unit->unit_id, sdom->active_unit_count);
 }
@@ -1194,6 +1262,8 @@ csched_dom_cntl(
                 prv->weight += op->u.credit.weight * sdom->active_unit_count;
             }
             sdom->weight = op->u.credit.weight;
+
+            __csched_adj_privdom_weight(prv);
         }
 
         if ( op->u.credit.cap != (uint16_t)~0U )
@@ -1283,6 +1353,7 @@ csched_sys_cntl(const struct scheduler *ops,
 static void *cf_check
 csched_alloc_domdata(const struct scheduler *ops, struct domain *dom)
 {
+    struct csched_private *prv = CSCHED_PRIV(ops);
     struct csched_dom *sdom;
 
     sdom = xzalloc(struct csched_dom);
@@ -1295,6 +1366,13 @@ csched_alloc_domdata(const struct scheduler *ops, struct domain *dom)
     sdom->dom = dom;
     sdom->weight = CSCHED_DEFAULT_WEIGHT;
 
+    if ( is_hardware_domain(dom) )
+    {
+        printk("%s: setting dom %d as the privileged domain\n",
+               __func__, dom->domain_id);
+        prv->privdom = sdom;
+    }
+
     return sdom;
 }
 
@@ -1372,6 +1450,7 @@ static void cf_check csched_acct(void* dummy)
     int credit_balance;
     int credit_xtra;
     int credit;
+    uint32_t privdom_weight;
 
 
     spin_lock_irqsave(&prv->lock, flags);
@@ -1400,6 +1479,7 @@ static void cf_check csched_acct(void* dummy)
     credit_balance = 0;
     credit_xtra = 0;
     credit_cap = 0U;
+    privdom_weight = prv->privdom ? prv->privdom->weight : 0;
 
     list_for_each_safe( iter_sdom, next_sdom, &prv->active_sdom )
     {
@@ -1408,6 +1488,11 @@ static void cf_check csched_acct(void* dummy)
         BUG_ON( is_idle_domain(sdom->dom) );
         BUG_ON( sdom->active_unit_count == 0 );
         BUG_ON( sdom->weight == 0 );
+
+        /* Privdom weight might have been recalculated - adjust weight_left */
+        if ( sdom == prv->privdom )
+            weight_left += (sdom->weight - privdom_weight) * sdom->active_unit_count;
+
         BUG_ON( (sdom->weight * sdom->active_unit_count) > weight_left );
 
         weight_left -= ( sdom->weight * sdom->active_unit_count );
