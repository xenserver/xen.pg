From: Anthony PERARD <anthony.perard@citrix.com>
Date: Mon, 18 Oct 2021 16:25:31 +0000
Subject: implementation of PPI _DSM

Based on QEMU's implementation,
found in qemu.git:hw/acpi/tpm.c (tpm_build_ppi_acpi()).

Signed-off-by: Anthony PERARD <anthony.perard@citrix.com>
diff --git a/tools/libacpi/ssdt_tpm.asl b/tools/libacpi/ssdt_tpm.asl
index f8f4ea7df2..8a13c44f20 100644
--- a/tools/libacpi/ssdt_tpm.asl
+++ b/tools/libacpi/ssdt_tpm.asl
@@ -28,9 +28,142 @@ DefinitionBlock ("SSDT_TPM.aml", "SSDT", 2, "Xen", "HVM", 0)
                 0x00001000,         // Address Length
                 )
         })
+
+        OperationRegion (TPP2, SystemMemory, 0xFED45000 + 0x100, 0x5A) // TPM_PPI_ADDR_BASE + 0x100
+        Field (TPP2, AnyAcc, NoLock, Preserve)
+        {
+            PPIN, 8,
+            PPIP, 32,
+            PPRP, 32,
+            PPRQ, 32,
+            PPRM, 32,
+            LPPR, 32,
+        }
+
+        Method (TPFN, 1, Serialized)
+        {
+            // returns operation flags
+            If (Arg0 >= 0x100) {
+                Return (0)
+            }
+            OperationRegion (TPP1, SystemMemory, 0xFED45000 + Arg0, 0x1)
+            Field (TPP1, ByteAcc, NoLock, Preserve)
+            {
+                TPPF, 8,
+            }
+            Return (TPPF)
+        }
+
         Method (_STA, 0, NotSerialized)  // _STA: Status
         {
             Return (0x0F)
         }
+
+        // Use global TPM2 & TPM3 variables to workaround Windows ACPI bug
+        // when returning packages.
+        Name (TPM2, Package (0x2) { 0, 0 })
+        Name (TPM3, Package (0x3) { 0, 0, 0 })
+
+        Method (_DSM, 4, Serialized)
+        {
+            // Arg0: UUID
+            // Arg1: revision
+            // Arg2: function
+
+            // Local0: operation op
+            // Local1: operation flags
+
+            /* Physical Presence Interface */
+            If ((Arg0 == ToUUID ("3DDDFAA6-361B-4eb4-A424-8D10089D1653"))) {
+
+                // _DSM query function
+                If (Arg2 == 0) {
+                    Return (Buffer (2) { 0xff, 0x1 }) /* function 1-8 */
+                }
+
+                // Get Physical Presence Interface Version
+                If (Arg2 == 1) {
+                    Return ("1.3")
+                }
+
+                // Submit TPM Operation Request to Pre-OS Environment
+                If (Arg2 == 2) {
+                    Local0 = DerefOf (Arg3 [0]) // opcode
+                    Local1 = TPFN (Local0) // op flags
+                    if ((Local1 & 0x07) == 0x0) { // TPM_PPI_FUNC_NOT_IMPLEMENTED
+                        Return (1)
+                    }
+
+                    PPRQ = Local0
+                    PPRM = 0
+                    Return (0)
+                }
+
+                // Get Pending TPM Operation Requested By the OS
+                If (Arg2 == 3) {
+                    If (Arg1 == 1) {
+                        TPM2[1] = PPRQ
+                        Return (TPM2)
+                    }
+                    If (Arg1 == 2) {
+                        TPM3[1] = PPRQ
+                        TPM3[2] = PPRM
+                        Return (TPM3)
+                    }
+                }
+
+                // Get Platform-Specific Action to Transition to Pre-OS Environment
+                If (Arg2 == 4) {
+                    Return (2) // Reboot
+                }
+
+                // Return TPM Operation Response to OS Environment
+                If (Arg2 == 5) {
+                    TPM3[1] = LPPR
+                    TPM3[2] = PPRP
+                    Return (TPM3)
+                }
+
+                // Submit preferred user language
+                If (Arg2 == 6) {
+                    Return (0x3) // not implemented
+                }
+
+                // Submit TPM Operation Request to Pre-OS Environment 2
+                If (Arg2 == 7) {
+                    Local0 = DerefOf (Arg3 [0]) // opcode
+                    Local1 = TPFN (Local0) // op flags
+                    if ((Local1 & 0x07) == 0x0) { // TPM_PPI_FUNC_NOT_IMPLEMENTED
+                        Return (1)
+                    }
+                    if ((Local1 & 0x02) == 0x0) { // TPM_PPI_FUNC_BLOCKED
+                        Return (3)
+                    }
+
+                    // Rev ID == 1
+                    If (Arg1 == 1) {
+                        PPRQ = Local0
+                        PPRM = 0
+                    }
+
+                    // Rev ID == 2
+                    If (Arg1 == 2) {
+                        PPRQ = Local0
+                        PPRM = DerefOf (Arg3[1])
+                    }
+
+                    Return (0)
+                }
+
+                // Get User Confirmation Status for Operation
+                If (Arg2 == 8) {
+                    Local0 = DerefOf (Arg3 [0]) // opcode
+                    Local1 = TPFN (Local0) // op flags
+                    Return (Local1 & 0x7)
+                }
+
+            }
+            Return (Buffer (1) { 0x00 })
+        }
     }
 }
