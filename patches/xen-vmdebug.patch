From 4adb0620ba5bcdda9ced529ff685dcc9fd83cc26 Mon Sep 17 00:00:00 2001
From: Andrew Cooper <andrew.cooper3@citrix.com>
Date: Fri, 30 Jan 2015 20:41:49 +0000
Subject: [PATCH] xen-vmdebug - a developer tool for poking virtual machines

Supports:
 - get/set HVM parameters
diff --git a/tools/Makefile b/tools/Makefile
index 4beea67..e95c3ec 100644
--- a/tools/Makefile
+++ b/tools/Makefile
@@ -33,6 +33,7 @@ SUBDIRS-$(CONFIG_X86) += xenpaging
 SUBDIRS-$(CONFIG_X86) += debugger/gdbsx
 SUBDIRS-$(CONFIG_X86) += debugger/kdd
 SUBDIRS-$(CONFIG_TESTS) += tests
+SUBDIRS-y += vmdebug
 
 # These don't cross-compile
 ifeq ($(XEN_COMPILE_ARCH),$(XEN_TARGET_ARCH))
diff --git a/tools/vmdebug/Makefile b/tools/vmdebug/Makefile
new file mode 100644
index 0000000..df11885
--- /dev/null
+++ b/tools/vmdebug/Makefile
@@ -0,0 +1,32 @@
+XEN_ROOT := $(CURDIR)/../..
+include $(XEN_ROOT)/tools/Rules.mk
+
+PROGRAM := xen-vmdebug
+OBJS := main.o cmdtable.o lazy.o hvmparam.o
+
+CFLAGS += -Werror $(CFLAGS_libxenctrl) $(CFLAGS_libxenguest)
+
+.PHONY: all
+all: build
+
+.PHONY: build
+build: $(PROGRAM)
+
+$(PROGRAM): $(OBJS)
+	$(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS_libxenctrl) $(APPEND_LDFLAGS)
+
+.PHONY: install
+install: build
+	$(INSTALL_DIR) $(DESTDIR)$(sbindir)
+	$(INSTALL_PROG) $(PROGRAM) $(DESTDIR)$(sbindir)
+
+.PHONY: clean
+clean:
+	$(RM) *.o *~ $(PROGRAM)
+	$(RM) $(DEPS)
+
+.PHONY: distclean
+distclean: clean
+
+-include $(DEPS)
+
diff --git a/tools/vmdebug/cmdtable.c b/tools/vmdebug/cmdtable.c
new file mode 100644
index 0000000..d4f3b2d
--- /dev/null
+++ b/tools/vmdebug/cmdtable.c
@@ -0,0 +1,39 @@
+#include "vmdebug.h"
+
+const struct cmdspec cmdtable[] =
+{
+    {
+        "help",
+        &main_help,
+        "Provide more information about a command",
+        "  xen-vmdebug help <command>",
+    },
+    {
+        "hvmparam",
+        &main_hvmparam,
+        "Get or set a domains HVM parameters",
+
+        "  xen-vmdebug hvmparam index\n"
+        "    Print an index of HVM parameters\n"
+        "\n"
+        "  xen-vmdebug <domid> hvmparam\n"
+        "    Get all HVM params for a domain\n"
+        "\n"
+        "  xen-vmdebug <domid> hvmparam <param> [<param>]\n"
+        "    Get selected HVM params for a domain\n"
+        "\n"
+        "  xen-vmdebug <domid> hvmparam <param>=<val> [<param>=<val>]\n"
+        "    Set a domains HVM params to the given values\n"
+    },
+    { 0 }
+};
+
+/*
+ * Local variables:
+ * mode: C
+ * c-file-style: "BSD"
+ * c-basic-offset: 4
+ * tab-width: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff --git a/tools/vmdebug/hvmparam.c b/tools/vmdebug/hvmparam.c
new file mode 100644
index 0000000..68d947d
--- /dev/null
+++ b/tools/vmdebug/hvmparam.c
@@ -0,0 +1,223 @@
+#include <string.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <inttypes.h>
+#include <stdint.h>
+
+#include <xenctrl.h>
+
+#include <xen/hvm/params.h>
+
+#include "vmdebug.h"
+
+/* Format width for parameter names */
+static const int name_width = 24;
+
+typedef struct
+{
+    const char *name, *desc;
+} hvmparam_desc_t;
+static hvmparam_desc_t params[HVM_NR_PARAMS] =
+{
+#define PARAM(n, d) [ HVM_PARAM_ ## n ] = { #n, (d) }
+    PARAM(CALLBACK_IRQ, "Event channel delivery settings"),
+    PARAM(STORE_PFN, "Xenstore frame"),
+    PARAM(STORE_EVTCHN, "Xenstore event channel"),
+    PARAM(PAE_ENABLED, "Page Address Extenstions available?"),
+    PARAM(IOREQ_PFN, "Device Model IO Request frame"),
+    PARAM(BUFIOREQ_PFN, "Device Model Buffered IO Request frame"),
+    PARAM(BUFIOREQ_EVTCHN, "Device Model Buffered IO Request event channel"),
+    PARAM(VIRIDIAN, "Windows Viridian enlightenments"),
+    PARAM(TIMER_MODE, "Timer tick delivery settings"),
+    PARAM(HPET_ENABLED, "HPET available?"),
+    PARAM(IDENT_PT, "Identity-map pagetable (Intel restricted real mode)"),
+    PARAM(DM_DOMAIN, "Device Model domid"),
+    PARAM(ACPI_S_STATE, "ACPI System State"),
+    PARAM(VM86_TSS, "VM86 TSS (Intel restricted real mode)"),
+    PARAM(VPT_ALIGN, "Align virtual timers?"),
+    PARAM(CONSOLE_PFN, "PV console frame"),
+    PARAM(CONSOLE_EVTCHN, "PV console event channel"),
+    PARAM(ACPI_IOPORTS_LOCATION, "APCI PM1a control block location"),
+    PARAM(MEMORY_EVENT_CR0, "Memory Event controls for CR0"),
+    PARAM(MEMORY_EVENT_CR3, "Memory Event controls for CR3"),
+    PARAM(MEMORY_EVENT_CR4, "Memory Event controls for CR4"),
+    PARAM(MEMORY_EVENT_INT3, "Memory Event controls for INT3"),
+    PARAM(MEMORY_EVENT_SINGLE_STEP, "Memory Event controls for single step"),
+    PARAM(MEMORY_EVENT_MSR, "Memory Event controls for MSR access"),
+    PARAM(NESTEDHVM, "Nested Virtualisation available?"),
+    PARAM(PAGING_RING_PFN, "Memory Event Paging Ring frame"),
+    PARAM(MONITOR_RING_PFN, "Memory Event Monitor Ring frame"),
+    PARAM(SHARING_RING_PFN, "Memory Event Sharing Ring frame"),
+    PARAM(TRIPLE_FAULT_REASON, "Action on triple fault"),
+    PARAM(IOREQ_SERVER_PFN, "IO Request Server frame start"),
+    PARAM(NR_IOREQ_SERVER_PAGES, "Number of IO Request Server frames"),
+    PARAM(VM_GENERATION_ID_ADDR, "Windows Generation ID physical address"),
+#undef PARAM
+};
+
+static void dump_param_index(void)
+{
+    unsigned i;
+
+    printf("HVM Parameters:\n");
+    for ( i = 0; i < ARRAY_SIZE(params); ++i )
+    {
+        if ( params[i].name )
+            printf("%-3u %-*s %s\n",
+                   i, name_width, params[i].name, params[i].desc);
+    }
+}
+
+static int dump_all_params(xc_interface *xch, int domid)
+{
+    unsigned i;
+    uint64_t val;
+    int ret, rc = 0;
+
+    for ( i = 0; i < ARRAY_SIZE(params); ++i )
+    {
+        if ( params[i].name )
+        {
+            ret = xc_hvm_param_get(xch, domid, i, &val);
+            rc |= ret;
+
+            if ( ret )
+                printf("Get param %u failed: %d - %s\n",
+                       i, errno, strerror(errno));
+            else
+                printf("%-3u %-*s 0x%016"PRIx64"\n",
+                       i, name_width, params[i].name, val);
+        }
+    }
+
+    return !!rc;
+}
+
+int main_hvmparam(int argc, char ** argv, const cmdopts_t *opts)
+{
+    unsigned i;
+    xc_interface *xch;
+    xc_dominfo_t info = { 0 };
+    int ret, rc = 0;
+
+    /* No domid must be an index request... */
+    if ( opts->domid == -1 )
+    {
+        if ( argc == 1 || !strcmp(argv[1], "index") )
+        {
+            dump_param_index();
+            return 0;
+        }
+        else
+        {
+            printf("No domain specified\n");
+            return 1;
+        }
+    }
+
+    /* Permit an index request even if a domid is specified */
+    if ( argc > 1 && !strcmp(argv[1], "index") )
+    {
+        dump_param_index();
+        return 0;
+    }
+
+    xch = get_xch();
+
+    /* Check that the domain exists */
+    if ( xc_domain_getinfo(xch, opts->domid, 1, &info) != 1 ||
+         (info.domid != opts->domid) )
+    {
+        printf("Unable to get dominfo for dom%d - %s (%d)\n",
+               opts->domid, strerror(errno), errno);
+        return 1;
+    }
+
+    /* Check that the domain is an HVM domain */
+    if ( !info.hvm )
+    {
+        printf("dom%d is not an HVM domain\n", opts->domid);
+        return 1;
+    }
+
+    /* An empty list with a valid domain is a request for all params */
+    if ( argc == 1 )
+        return dump_all_params(xch, opts->domid);
+
+    /* Look at each parameter... */
+    for ( i = 1; i < argc; ++i )
+    {
+        const char *cmd = argv[i];
+        char *endp = NULL;
+        unsigned param; uint64_t val;
+
+        /* Parse the parameter index */
+        errno = 0;
+        param = strtoul(cmd, &endp, 0);
+        if ( errno || endp == cmd )
+        {
+            printf("Bad HVM param '%s'\n", cmd);
+            continue;
+        }
+
+        /* Check the param is within range */
+        if ( param >= HVM_NR_PARAMS )
+        {
+            printf("Param %u out of range (0 -> %u)\n",
+                   param, HVM_NR_PARAMS - 1);
+            continue;
+        }
+
+        /* If there is '=' present, this is a set request */
+        if ( *endp && endp[0] == '=' )
+        {
+            char *endv = NULL;
+
+            endp++;
+
+            errno = 0;
+            val = strtoull(endp, &endv, 0);
+            if ( errno || endv == endp )
+            {
+                printf("Bad value '%s' for param %u\n",
+                       endp, param);
+                continue;
+            }
+
+            ret = xc_hvm_param_set(xch, opts->domid, param, val);
+            rc |= ret;
+
+            if ( ret )
+                printf("Set param %u = 0x%016"PRIx64" failed: %d - %s\n",
+                       param, val, errno, strerror(errno));
+            else
+                printf("Set param %u = 0x%016"PRIx64"\n", param, val);
+
+            continue;
+        }
+        else
+        {
+            ret = xc_hvm_param_get(xch, opts->domid, param, &val);
+            rc |= ret;
+
+            if ( ret )
+                printf("Get param %u failed: %d - %s\n",
+                       param, errno, strerror(errno));
+            else
+                printf("%-3u %-*s 0x%016"PRIx64"\n",
+                       param, name_width, params[param].name, val);
+        }
+    }
+
+    return !!rc;
+}
+
+/*
+ * Local variables:
+ * mode: C
+ * c-file-style: "BSD"
+ * c-basic-offset: 4
+ * tab-width: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff --git a/tools/vmdebug/lazy.c b/tools/vmdebug/lazy.c
new file mode 100644
index 0000000..0f0db4a
--- /dev/null
+++ b/tools/vmdebug/lazy.c
@@ -0,0 +1,37 @@
+#include <stdlib.h>
+
+#include "vmdebug.h"
+
+static xc_interface *global_xch = NULL;
+
+xc_interface * get_xch(void)
+{
+    if ( global_xch )
+        return global_xch;
+
+    global_xch = xc_interface_open(NULL, NULL, 0);
+
+    if ( !global_xch )
+        exit(1);
+
+    return global_xch;
+}
+
+void lazy_cleanup(void)
+{
+    if ( global_xch )
+    {
+        xc_interface_close(global_xch);
+        global_xch = NULL;
+    }
+}
+
+/*
+ * Local variables:
+ * mode: C
+ * c-file-style: "BSD"
+ * c-basic-offset: 4
+ * tab-width: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff --git a/tools/vmdebug/main.c b/tools/vmdebug/main.c
new file mode 100644
index 0000000..ca2caba
--- /dev/null
+++ b/tools/vmdebug/main.c
@@ -0,0 +1,162 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <inttypes.h>
+#include <assert.h>
+#include <ctype.h>
+
+#include <getopt.h>
+
+#include "vmdebug.h"
+
+/* Locate a command in the command table by name. */
+static const cmdspec_t *find_command(const char *name)
+{
+    unsigned i;
+
+    for ( i = 0; cmdtable[i].name; ++i )
+        if ( !strcmp(cmdtable[i].name, name) )
+            return &cmdtable[i];
+
+    return NULL;
+}
+
+static void basic_help(void)
+{
+    unsigned i;
+
+    static const char intro[] =
+        "xen-vmdebug - A developer tool for poking virtual machines\n"
+        "\n"
+        "WARNING: incorrect use of this tool can break your VM in\n"
+        "interesting ways.  You get to keep any resulting pieces.\n"
+        "\n"
+        "Typical usage:\n"
+        "    xen-vmdebug <domid> <command> [<args>]\n"
+        "\n"
+        "Available commands:\n"
+        ;
+    const int name_width = 18;
+
+    printf(intro);
+    for ( i = 0; cmdtable[i].name; ++i )
+        printf("    %-*s %s\n", name_width, cmdtable[i].name, cmdtable[i].desc);
+    exit(0);
+}
+
+int main_help(int argc, char **argv, const cmdopts_t *opts)
+{
+    const cmdspec_t *cmd;
+    unsigned i;
+
+    if ( argc == 1 )
+        basic_help();
+
+    for ( i = 1; i < argc; ++i )
+    {
+        cmd = find_command(argv[i]);
+
+        if ( !cmd )
+        {
+            printf("No such command '%s'\n", argv[i]);
+            continue;
+        }
+
+        printf("Command %s: %s\n", cmd->name, cmd->desc);
+        if ( cmd->detail )
+            printf("%s\n", cmd->detail);
+        printf("\n");
+    }
+
+    return 0;
+}
+
+static void parse_cmdline(int argc, char **argv)
+{
+    static const char shortops[] = "h";
+    static const struct option opts[] =
+    {
+        { "help", no_argument, NULL, 'h', },
+        { NULL }
+    };
+
+    int c, index;
+
+    if ( argc == 1 )
+        basic_help();
+
+    for (;;)
+    {
+        c = getopt_long(argc, argv, shortops, opts, &index);
+
+        switch ( c )
+        {
+        case -1:
+            return;
+
+        case 'h':
+            basic_help();
+            break;
+        }
+    }
+}
+
+int main(int argc, char **argv)
+{
+    int ret;
+    struct cmdopts opts = { 0 };
+
+    atexit(lazy_cleanup);
+
+    parse_cmdline(argc, argv);
+    /* -h, --help and such out of the way */
+
+    assert(argc > optind);
+
+    if ( isdigit(argv[optind][0]) )
+    {
+        errno = 0;
+        opts.domid = strtoul(argv[optind], NULL, 10);
+        if ( errno )
+        {
+            fprintf(stderr, "Failed to parse '%s' as domid: %d, %s\n",
+                    argv[1], errno, strerror(errno));
+            exit(1);
+        }
+
+        optind++;
+    }
+    else
+        opts.domid = -1;
+
+    if ( optind == argc )
+    {
+        printf("No command specified\n");
+        return 1;
+    }
+    else
+    {
+        const cmdspec_t *cmd = find_command(argv[optind]);
+
+        if ( cmd )
+            ret = cmd->main(argc - optind, &argv[optind], &opts);
+        else
+        {
+            printf("No such command '%s'\n", argv[optind]);
+            return 1;
+        }
+    }
+
+    return ret;
+}
+
+/*
+ * Local variables:
+ * mode: C
+ * c-file-style: "BSD"
+ * c-basic-offset: 4
+ * tab-width: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff --git a/tools/vmdebug/vmdebug.h b/tools/vmdebug/vmdebug.h
new file mode 100644
index 0000000..02b575a
--- /dev/null
+++ b/tools/vmdebug/vmdebug.h
@@ -0,0 +1,44 @@
+#ifndef __VMDEBUG_H__
+#define __VMDEBUG_H__
+
+#include <xenctrl.h>
+
+#define ARRAY_SIZE(a) (sizeof (a) / sizeof *(a))
+
+typedef struct cmdopts
+{
+    int domid; /* -1 implies no domid given. */
+} cmdopts_t;
+
+int main_help(int argc, char **argv, const cmdopts_t *opts);
+int main_hvmparam(int argc, char **argv, const cmdopts_t *opts);
+
+typedef struct cmdspec
+{
+    const char *name;
+
+    int (*main)(int argc, char **argv, const cmdopts_t *opts);
+
+    const char *desc;
+    const char *detail;
+} cmdspec_t;
+
+extern const cmdspec_t cmdtable[];
+
+/* Obtain 'xch', opened in a lazy manner. */
+xc_interface * get_xch(void);
+
+/* Cleans up all lazily opened resources. */
+void lazy_cleanup(void);
+
+#endif /* __VMDEBUG_H__ */
+
+/*
+ * Local variables:
+ * mode: C
+ * c-file-style: "BSD"
+ * c-basic-offset: 4
+ * tab-width: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
