diff --git a/misc/coverity/model.c b/misc/coverity/model.c
index bd62566..a953af3 100644
--- a/misc/coverity/model.c
+++ b/misc/coverity/model.c
@@ -39,9 +39,15 @@
 
 #define assert(cond) /* empty */
 
+typedef unsigned int uint32_t;
+typedef unsigned long xen_pfn_t;
+
 struct page_info {};
 struct pthread_mutex_t {};
 
+struct xc_interface_core {};
+typedef struct xc_interface_core xc_interface;
+
 struct libxl__ctx
 {
     struct pthread_mutex_t lock;
@@ -121,15 +127,158 @@ void libxl__ctx_unlock(libxl_ctx *ctx)
 }
 
 /*
- * Coverity doesn't understand __builtin_unreachable(), which causes it to
- * incorrectly find issues based on continuing execution along the false
- * branch of an ASSERT().
+ * Coverity doesn't understand our unreachable() macro, which causes it to
+ * incorrectly find issues based on continuing execution along unreachable
+ * paths.
  */
-void __builtin_unreachable(void)
+void unreachable(void)
 {
     __coverity_panic__();
 }
 
+
+typedef void* va_list;
+
+int asprintf(char **strp, const char *fmt, ...)
+{
+    char ch1;
+    int success;
+    unsigned int total_bytes_printed;
+
+    /* fmt must be NUL terminated, and reasonably bounded */
+    __coverity_string_null_sink__((void*)fmt);
+    __coverity_string_size_sink__((void*)fmt);
+
+    /* Reads fmt */
+    ch1 = *fmt;
+
+    if ( success )
+    {
+        /* Allocates a string.  Exact size is not calculable */
+        char *str = __coverity_alloc_nosize__();
+
+        /* Should be freed with free() */
+        __coverity_mark_as_afm_allocated__(str, AFM_free);
+
+        /* Returns memory via first parameter */
+        *strp = str;
+
+        /* Writes to all of the allocated string */
+        __coverity_writeall__(str);
+
+        /* Returns a positive number of bytes printed on success */
+        return total_bytes_printed;
+    }
+    else
+    {
+        /* Return -1 on failure */
+        return -1;
+    }
+}
+
+int vasprintf(char **strp, const char *fmt, va_list ap)
+{
+    char ch1;
+    int success;
+    unsigned int total_bytes_printed;
+
+    /* fmt must be NUL terminated, and reasonably bounded */
+    __coverity_string_null_sink__((void*)fmt);
+    __coverity_string_size_sink__((void*)fmt);
+
+    /* Reads fmt */
+    ch1 = *fmt;
+
+    /* Reads ap */
+    ch1 = *(char*)ap;
+
+    if ( success )
+    {
+        /* Allocates a string.  Exact size is not calculable */
+        char *str = __coverity_alloc_nosize__();
+
+        /* Should be freed with free() */
+        __coverity_mark_as_afm_allocated__(str, AFM_free);
+
+        /* Returns memory via first parameter */
+        *strp = str;
+
+        /* Writes to all of the allocated string */
+        __coverity_writeall__(str);
+
+        /* Returns a positive number of bytes printed on success */
+        return total_bytes_printed;
+    }
+    else
+    {
+        /* Return -1 on failure */
+        return -1;
+    }
+}
+
+void cpuid_count(unsigned leaf, unsigned subleaf,
+                 unsigned *eax, unsigned *ebx,
+                 unsigned *ecx, unsigned *edx)
+{
+    unsigned f;
+
+    *eax = f;
+    *ebx = f;
+    *ecx = f;
+    *edx = f;
+}
+
+int __builtin_constant_p(unsigned long expr)
+{
+    int x;
+
+    if ( x )
+        return 1;
+    else
+        return 0;
+}
+
+int read(int fd, void *buf, size_t count);
+int read_exact(int fd, void *data, size_t size)
+{
+    return read(fd, data, size);
+}
+
+void *xc_map_foreign_bulk(xc_interface *xch, uint32_t dom, int prot,
+                          const xen_pfn_t *arr, int *err, unsigned int num)
+{
+    xc_interface interface;
+    xen_pfn_t pfn;
+    int success, errval;
+    unsigned int i;
+
+    /* 1) Reads 'xch'. */
+    interface = *xch;
+
+    /* 2) Sink negative array lengths. */
+    __coverity_negative_sink__(num);
+
+    /* 3) Reads every element in arr. */
+    for ( i = 0; i < num; ++i )
+        pfn = arr[i];
+
+    if ( success )
+    {
+        /*
+         * 4) In the success case, return an allocated area of 'num' pages
+         * which must be munmap()'d, and write to every element in 'err'.
+         */
+        void *area = __coverity_alloc__(num * PAGE_SIZE);
+
+        for ( i = 0; i < num; ++i )
+            err[i] = errval;
+
+        return area;
+    }
+    else
+        return NULL;
+}
+
 /*
  * Local variables:
  * mode: C
diff --git a/misc/coverity/nodefs.h b/misc/coverity/nodefs.h
new file mode 100644
index 0000000..82c9368
--- /dev/null
+++ b/misc/coverity/nodefs.h
@@ -0,0 +1,2 @@
+#nodef unreachable
+void unreachable(void);
